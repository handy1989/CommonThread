!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CalculateSumReqMessage	calculate_sum_message.cpp	/^CalculateSumReqMessage::CalculateSumReqMessage()$/;"	f	class:CalculateSumReqMessage	signature:()
CalculateSumReqMessage	calculate_sum_message.h	/^    CalculateSumReqMessage();$/;"	p	class:CalculateSumReqMessage	access:public	signature:()
CalculateSumReqMessage	calculate_sum_message.h	/^class CalculateSumReqMessage : public Message$/;"	c	inherits:Message
CalculateSumReqMessage::CalculateSumReqMessage	calculate_sum_message.cpp	/^CalculateSumReqMessage::CalculateSumReqMessage()$/;"	f	class:CalculateSumReqMessage	signature:()
CalculateSumReqMessage::CalculateSumReqMessage	calculate_sum_message.h	/^    CalculateSumReqMessage();$/;"	p	class:CalculateSumReqMessage	access:public	signature:()
CalculateSumReqMessage::buildBody	calculate_sum_message.cpp	/^bool CalculateSumReqMessage::buildBody()$/;"	f	class:CalculateSumReqMessage	signature:()
CalculateSumReqMessage::buildBody	calculate_sum_message.h	/^    virtual bool buildBody();$/;"	p	class:CalculateSumReqMessage	access:public	signature:()
CalculateSumReqMessage::getPara1	calculate_sum_message.h	/^    double getPara1()$/;"	f	class:CalculateSumReqMessage	access:public	signature:()
CalculateSumReqMessage::getPara2	calculate_sum_message.h	/^    double getPara2()$/;"	f	class:CalculateSumReqMessage	access:public	signature:()
CalculateSumReqMessage::para1	calculate_sum_message.h	/^    double para1;$/;"	m	class:CalculateSumReqMessage	access:private
CalculateSumReqMessage::para2	calculate_sum_message.h	/^    double para2;$/;"	m	class:CalculateSumReqMessage	access:private
CalculateSumReqMessage::parseBody	calculate_sum_message.cpp	/^bool CalculateSumReqMessage::parseBody()$/;"	f	class:CalculateSumReqMessage	signature:()
CalculateSumReqMessage::parseBody	calculate_sum_message.h	/^    virtual bool parseBody();$/;"	p	class:CalculateSumReqMessage	access:public	signature:()
CalculateSumReqMessage::setHeaderControl	calculate_sum_message.h	/^    virtual void setHeaderControl()$/;"	f	class:CalculateSumReqMessage	access:public	signature:()
CalculateSumReqMessage::~CalculateSumReqMessage	calculate_sum_message.cpp	/^CalculateSumReqMessage::~CalculateSumReqMessage()$/;"	f	class:CalculateSumReqMessage	signature:()
CalculateSumReqMessage::~CalculateSumReqMessage	calculate_sum_message.h	/^    ~CalculateSumReqMessage();$/;"	p	class:CalculateSumReqMessage	access:public	signature:()
CalculateSumRspMessage	calculate_sum_message.cpp	/^CalculateSumRspMessage::CalculateSumRspMessage()$/;"	f	class:CalculateSumRspMessage	signature:()
CalculateSumRspMessage	calculate_sum_message.h	/^    CalculateSumRspMessage();$/;"	p	class:CalculateSumRspMessage	access:public	signature:()
CalculateSumRspMessage	calculate_sum_message.h	/^class CalculateSumRspMessage : public Message$/;"	c	inherits:Message
CalculateSumRspMessage::CalculateSumRspMessage	calculate_sum_message.cpp	/^CalculateSumRspMessage::CalculateSumRspMessage()$/;"	f	class:CalculateSumRspMessage	signature:()
CalculateSumRspMessage::CalculateSumRspMessage	calculate_sum_message.h	/^    CalculateSumRspMessage();$/;"	p	class:CalculateSumRspMessage	access:public	signature:()
CalculateSumRspMessage::buildBody	calculate_sum_message.cpp	/^bool CalculateSumRspMessage::buildBody()$/;"	f	class:CalculateSumRspMessage	signature:()
CalculateSumRspMessage::buildBody	calculate_sum_message.h	/^    virtual bool buildBody();$/;"	p	class:CalculateSumRspMessage	access:public	signature:()
CalculateSumRspMessage::m_result	calculate_sum_message.h	/^    double m_result;$/;"	m	class:CalculateSumRspMessage	access:private
CalculateSumRspMessage::parseBody	calculate_sum_message.cpp	/^bool CalculateSumRspMessage::parseBody()$/;"	f	class:CalculateSumRspMessage	signature:()
CalculateSumRspMessage::parseBody	calculate_sum_message.h	/^    virtual bool parseBody();$/;"	p	class:CalculateSumRspMessage	access:public	signature:()
CalculateSumRspMessage::setHeaderControl	calculate_sum_message.h	/^    virtual void setHeaderControl()$/;"	f	class:CalculateSumRspMessage	access:public	signature:()
CalculateSumRspMessage::setResult	calculate_sum_message.h	/^    void setResult(double para1, double para2)$/;"	f	class:CalculateSumRspMessage	access:public	signature:(double para1, double para2)
CalculateSumRspMessage::~CalculateSumRspMessage	calculate_sum_message.cpp	/^CalculateSumRspMessage::~CalculateSumRspMessage()$/;"	f	class:CalculateSumRspMessage	signature:()
CalculateSumRspMessage::~CalculateSumRspMessage	calculate_sum_message.h	/^    ~CalculateSumRspMessage();$/;"	p	class:CalculateSumRspMessage	access:public	signature:()
ClientConnectionHandler	client_connection_handler.cpp	/^ClientConnectionHandler::ClientConnectionHandler(int check_interval) : CommonThreadPool(1)$/;"	f	class:ClientConnectionHandler	signature:(int check_interval)
ClientConnectionHandler	client_connection_handler.h	/^    ClientConnectionHandler(int check_internal);$/;"	p	class:ClientConnectionHandler	access:public	signature:(int check_internal)
ClientConnectionHandler	client_connection_handler.h	/^class ClientConnectionHandler : public CommonThreadPool$/;"	c	inherits:CommonThreadPool
ClientConnectionHandler::ClientConnectionHandler	client_connection_handler.cpp	/^ClientConnectionHandler::ClientConnectionHandler(int check_interval) : CommonThreadPool(1)$/;"	f	class:ClientConnectionHandler	signature:(int check_interval)
ClientConnectionHandler::ClientConnectionHandler	client_connection_handler.h	/^    ClientConnectionHandler(int check_internal);$/;"	p	class:ClientConnectionHandler	access:public	signature:(int check_internal)
ClientConnectionHandler::checkTimeout	client_connection_handler.cpp	/^void ClientConnectionHandler::checkTimeout()$/;"	f	class:ClientConnectionHandler	signature:()
ClientConnectionHandler::checkTimeout	client_connection_handler.h	/^    void checkTimeout();$/;"	p	class:ClientConnectionHandler	access:private	signature:()
ClientConnectionHandler::initQueues	client_connection_handler.cpp	/^void ClientConnectionHandler::initQueues(ClientSocketQueue* recv_sock_q)$/;"	f	class:ClientConnectionHandler	signature:(ClientSocketQueue* recv_sock_q)
ClientConnectionHandler::initQueues	client_connection_handler.h	/^    void initQueues(ClientSocketQueue*);$/;"	p	class:ClientConnectionHandler	access:public	signature:(ClientSocketQueue*)
ClientConnectionHandler::m_check_internal	client_connection_handler.h	/^    int m_check_internal;$/;"	m	class:ClientConnectionHandler	access:private
ClientConnectionHandler::m_cur_time	client_connection_handler.h	/^    int m_cur_time;$/;"	m	class:ClientConnectionHandler	access:private
ClientConnectionHandler::m_last_check_point	client_connection_handler.h	/^    int m_last_check_point;$/;"	m	class:ClientConnectionHandler	access:private
ClientConnectionHandler::m_recv_sock_q	client_connection_handler.h	/^    ClientSocketQueue* m_recv_sock_q;$/;"	m	class:ClientConnectionHandler	access:private
ClientConnectionHandler::processConnection	client_connection_handler.cpp	/^void ClientConnectionHandler::processConnection(int new_fd, int listen_port, int ip_addr, int client_port, int conn_timeout_ms)$/;"	f	class:ClientConnectionHandler	signature:(int new_fd, int listen_port, int ip_addr, int client_port, int conn_timeout_ms)
ClientConnectionHandler::processConnection	client_connection_handler.h	/^    void processConnection($/;"	p	class:ClientConnectionHandler	access:private	signature:( int new_fd, int listen_port, int ip_addr, int client_port, int conn_timeout_ms)
ClientConnectionHandler::work	client_connection_handler.cpp	/^void ClientConnectionHandler::work()$/;"	f	class:ClientConnectionHandler	signature:()
ClientConnectionHandler::work	client_connection_handler.h	/^    virtual void work();$/;"	p	class:ClientConnectionHandler	access:protected	signature:()
ClientConnectionHandler::~ClientConnectionHandler	client_connection_handler.cpp	/^ClientConnectionHandler::~ClientConnectionHandler()$/;"	f	class:ClientConnectionHandler	signature:()
ClientConnectionHandler::~ClientConnectionHandler	client_connection_handler.h	/^    virtual ~ClientConnectionHandler();$/;"	p	class:ClientConnectionHandler	access:public	signature:()
ClientReceiverHandler	client_receiver_handler.cpp	/^ClientReceiverHandler::ClientReceiverHandler(int thread_count) : CommonThreadPool(thread_count)$/;"	f	class:ClientReceiverHandler	signature:(int thread_count)
ClientReceiverHandler	client_receiver_handler.h	/^    ClientReceiverHandler(int thread_count);$/;"	p	class:ClientReceiverHandler	access:public	signature:(int thread_count)
ClientReceiverHandler	client_receiver_handler.h	/^class ClientReceiverHandler : public CommonThreadPool$/;"	c	inherits:CommonThreadPool
ClientReceiverHandler::ClientReceiverHandler	client_receiver_handler.cpp	/^ClientReceiverHandler::ClientReceiverHandler(int thread_count) : CommonThreadPool(thread_count)$/;"	f	class:ClientReceiverHandler	signature:(int thread_count)
ClientReceiverHandler::ClientReceiverHandler	client_receiver_handler.h	/^    ClientReceiverHandler(int thread_count);$/;"	p	class:ClientReceiverHandler	access:public	signature:(int thread_count)
ClientReceiverHandler::initQueues	client_receiver_handler.cpp	/^void ClientReceiverHandler::initQueues(ClientSocketQueue* socket_queue, MessageQueue* message_queue)$/;"	f	class:ClientReceiverHandler	signature:(ClientSocketQueue* socket_queue, MessageQueue* message_queue)
ClientReceiverHandler::initQueues	client_receiver_handler.h	/^    void initQueues(ClientSocketQueue* socket_queue, MessageQueue* message_queue);$/;"	p	class:ClientReceiverHandler	access:public	signature:(ClientSocketQueue* socket_queue, MessageQueue* message_queue)
ClientReceiverHandler::m_message_queue	client_receiver_handler.h	/^    MessageQueue* m_message_queue;$/;"	m	class:ClientReceiverHandler	access:private
ClientReceiverHandler::m_push_queue_fail	client_receiver_handler.h	/^    int m_push_queue_fail;$/;"	m	class:ClientReceiverHandler	access:private
ClientReceiverHandler::m_push_queue_succ	client_receiver_handler.h	/^    int m_push_queue_succ;$/;"	m	class:ClientReceiverHandler	access:private
ClientReceiverHandler::m_recv_message_num	client_receiver_handler.h	/^    int m_recv_message_num;$/;"	m	class:ClientReceiverHandler	access:private
ClientReceiverHandler::m_socket_queue	client_receiver_handler.h	/^    ClientSocketQueue* m_socket_queue;$/;"	m	class:ClientReceiverHandler	access:private
ClientReceiverHandler::recvCmd	client_receiver_handler.cpp	/^int ClientReceiverHandler::recvCmd(SocketInfoManager& socket_info)$/;"	f	class:ClientReceiverHandler	signature:(SocketInfoManager& socket_info)
ClientReceiverHandler::recvCmd	client_receiver_handler.h	/^    int recvCmd(SocketInfoManager& socket_info);$/;"	p	class:ClientReceiverHandler	access:public	signature:(SocketInfoManager& socket_info)
ClientReceiverHandler::recvData	client_receiver_handler.cpp	/^int ClientReceiverHandler::recvData(int sock_fd, char *recv_buffer, const int need_recv_bytes, int& real_recv_len)$/;"	f	class:ClientReceiverHandler	signature:(int sock_fd, char *recv_buffer, const int need_recv_bytes, int& real_recv_len)
ClientReceiverHandler::recvData	client_receiver_handler.h	/^    int recvData($/;"	p	class:ClientReceiverHandler	access:public	signature:( int sock_fd, char *recv_buffer, const int need_recv_bytes, int& real_recv_len)
ClientReceiverHandler::work	client_receiver_handler.cpp	/^void ClientReceiverHandler::work()$/;"	f	class:ClientReceiverHandler	signature:()
ClientReceiverHandler::work	client_receiver_handler.h	/^    virtual void work();$/;"	p	class:ClientReceiverHandler	access:protected	signature:()
ClientReceiverHandler::~ClientReceiverHandler	client_receiver_handler.cpp	/^ClientReceiverHandler::~ClientReceiverHandler()$/;"	f	class:ClientReceiverHandler	signature:()
ClientReceiverHandler::~ClientReceiverHandler	client_receiver_handler.h	/^    virtual ~ClientReceiverHandler();$/;"	p	class:ClientReceiverHandler	access:public	signature:()
ClientSendHandler	client_send_handler.cpp	/^ClientSendHandler::ClientSendHandler(int pool_size) : CommonThreadPool(pool_size)$/;"	f	class:ClientSendHandler	signature:(int pool_size)
ClientSendHandler	client_send_handler.h	/^    ClientSendHandler(int pool_size);$/;"	p	class:ClientSendHandler	access:public	signature:(int pool_size)
ClientSendHandler	client_send_handler.h	/^class ClientSendHandler : public CommonThreadPool$/;"	c	inherits:CommonThreadPool
ClientSendHandler::ClientSendHandler	client_send_handler.cpp	/^ClientSendHandler::ClientSendHandler(int pool_size) : CommonThreadPool(pool_size)$/;"	f	class:ClientSendHandler	signature:(int pool_size)
ClientSendHandler::ClientSendHandler	client_send_handler.h	/^    ClientSendHandler(int pool_size);$/;"	p	class:ClientSendHandler	access:public	signature:(int pool_size)
ClientSendHandler::initQueues	client_send_handler.cpp	/^void ClientSendHandler::initQueues(MessageQueue* message_send_queue)$/;"	f	class:ClientSendHandler	signature:(MessageQueue* message_send_queue)
ClientSendHandler::initQueues	client_send_handler.h	/^    void initQueues(MessageQueue* message_send_queue);$/;"	p	class:ClientSendHandler	access:public	signature:(MessageQueue* message_send_queue)
ClientSendHandler::m_message_send_queue	client_send_handler.h	/^    MessageQueue* m_message_send_queue;$/;"	m	class:ClientSendHandler	access:private
ClientSendHandler::m_revc_message	client_send_handler.h	/^    uint32_t m_revc_message;$/;"	m	class:ClientSendHandler	access:private
ClientSendHandler::m_send_fail	client_send_handler.h	/^    uint32_t m_send_fail;$/;"	m	class:ClientSendHandler	access:private
ClientSendHandler::m_send_succ	client_send_handler.h	/^    uint32_t m_send_succ;$/;"	m	class:ClientSendHandler	access:private
ClientSendHandler::sendData	client_send_handler.cpp	/^bool ClientSendHandler::sendData(int socket_fd,const char* data, int data_len)$/;"	f	class:ClientSendHandler	signature:(int socket_fd,const char* data, int data_len)
ClientSendHandler::sendData	client_send_handler.h	/^    bool sendData(int socket_fd,const char* data, int data_len);$/;"	p	class:ClientSendHandler	access:public	signature:(int socket_fd,const char* data, int data_len)
ClientSendHandler::work	client_send_handler.cpp	/^void ClientSendHandler::work()$/;"	f	class:ClientSendHandler	signature:()
ClientSendHandler::work	client_send_handler.h	/^    virtual void work();$/;"	p	class:ClientSendHandler	access:protected	signature:()
ClientSendHandler::~ClientSendHandler	client_send_handler.cpp	/^ClientSendHandler::~ClientSendHandler()$/;"	f	class:ClientSendHandler	signature:()
ClientSendHandler::~ClientSendHandler	client_send_handler.h	/^    virtual ~ClientSendHandler();$/;"	p	class:ClientSendHandler	access:public	signature:()
ClientSocketQueue	epoll_socket_manager.h	/^typedef CommonQueue<int> ClientSocketQueue;$/;"	t
CommonQueue	common_queue.h	/^    CommonQueue()$/;"	f	class:CommonQueue	access:public	signature:()
CommonQueue	common_queue.h	/^template <typename T> class CommonQueue$/;"	c
CommonQueue::CommonQueue	common_queue.h	/^    CommonQueue()$/;"	f	class:CommonQueue	access:public	signature:()
CommonQueue::getAbsTimeout	common_queue.h	/^    void getAbsTimeout(int timeout_ms, struct timespec& timeout)$/;"	f	class:CommonQueue	access:private	signature:(int timeout_ms, struct timespec& timeout)
CommonQueue::getCapacity	common_queue.h	/^    int getCapacity()$/;"	f	class:CommonQueue	access:public	signature:()
CommonQueue::getMaxSize	common_queue.h	/^    int getMaxSize()$/;"	f	class:CommonQueue	access:public	signature:()
CommonQueue::getSize	common_queue.h	/^    int getSize()$/;"	f	class:CommonQueue	access:public	signature:()
CommonQueue::init	common_queue.h	/^    bool init(int capacity)$/;"	f	class:CommonQueue	access:public	signature:(int capacity)
CommonQueue::m_capacity	common_queue.h	/^    int m_capacity;$/;"	m	class:CommonQueue	access:private
CommonQueue::m_cond_not_empty	common_queue.h	/^    pthread_cond_t m_cond_not_empty;$/;"	m	class:CommonQueue	access:private
CommonQueue::m_cond_not_full	common_queue.h	/^    pthread_cond_t m_cond_not_full;$/;"	m	class:CommonQueue	access:private
CommonQueue::m_max_size	common_queue.h	/^    int m_max_size;$/;"	m	class:CommonQueue	access:private
CommonQueue::m_mutex	common_queue.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:CommonQueue	access:private
CommonQueue::m_queue	common_queue.h	/^    std::queue<T> m_queue;$/;"	m	class:CommonQueue	access:private
CommonQueue::pop	common_queue.h	/^    bool pop(T& retVal)$/;"	f	class:CommonQueue	access:public	signature:(T& retVal)
CommonQueue::pop	common_queue.h	/^    bool pop(T& retVal, int wait_ms)$/;"	f	class:CommonQueue	access:public	signature:(T& retVal, int wait_ms)
CommonQueue::push	common_queue.h	/^    bool push(const T& element)$/;"	f	class:CommonQueue	access:public	signature:(const T& element)
CommonQueue::push	common_queue.h	/^    bool push(const T& element, int wait_ms)$/;"	f	class:CommonQueue	access:public	signature:(const T& element, int wait_ms)
CommonQueue::~CommonQueue	common_queue.h	/^    virtual ~CommonQueue()$/;"	f	class:CommonQueue	access:public	signature:()
CommonThreadPool	common_thread_pool.h	/^    CommonThreadPool(int pool_size) : m_pool_size(pool_size)$/;"	f	class:CommonThreadPool	access:public	signature:(int pool_size)
CommonThreadPool	common_thread_pool.h	/^class CommonThreadPool$/;"	c
CommonThreadPool::CommonThreadPool	common_thread_pool.h	/^    CommonThreadPool(int pool_size) : m_pool_size(pool_size)$/;"	f	class:CommonThreadPool	access:public	signature:(int pool_size)
CommonThreadPool::STACK_SIZE	common_thread_pool.h	/^    const static int STACK_SIZE = (1024);$/;"	m	class:CommonThreadPool	access:private
CommonThreadPool::destroyThreadId	common_thread_pool.cpp	/^void CommonThreadPool::destroyThreadId()$/;"	f	class:CommonThreadPool	signature:()
CommonThreadPool::destroyThreadId	common_thread_pool.h	/^    void destroyThreadId();$/;"	p	class:CommonThreadPool	access:public	signature:()
CommonThreadPool::detachThreads	common_thread_pool.cpp	/^void CommonThreadPool::detachThreads()$/;"	f	class:CommonThreadPool	signature:()
CommonThreadPool::detachThreads	common_thread_pool.h	/^    void detachThreads();$/;"	p	class:CommonThreadPool	access:public	signature:()
CommonThreadPool::getPoolSize	common_thread_pool.h	/^    inline int getPoolSize()$/;"	f	class:CommonThreadPool	access:public	signature:()
CommonThreadPool::m_pool_size	common_thread_pool.h	/^    int m_pool_size;$/;"	m	class:CommonThreadPool	access:private
CommonThreadPool::m_thread_ids	common_thread_pool.h	/^    pthread_t *m_thread_ids;$/;"	m	class:CommonThreadPool	access:private
CommonThreadPool::startThreads	common_thread_pool.cpp	/^bool CommonThreadPool::startThreads()$/;"	f	class:CommonThreadPool	signature:()
CommonThreadPool::startThreads	common_thread_pool.h	/^    bool startThreads();$/;"	p	class:CommonThreadPool	access:public	signature:()
CommonThreadPool::threadProc	common_thread_pool.cpp	/^void *CommonThreadPool::threadProc(void *para)$/;"	f	class:CommonThreadPool	signature:(void *para)
CommonThreadPool::threadProc	common_thread_pool.h	/^    static void* threadProc(void* para);$/;"	p	class:CommonThreadPool	access:private	signature:(void* para)
CommonThreadPool::waitThreadsTermination	common_thread_pool.cpp	/^void CommonThreadPool::waitThreadsTermination()$/;"	f	class:CommonThreadPool	signature:()
CommonThreadPool::waitThreadsTermination	common_thread_pool.h	/^    void waitThreadsTermination();$/;"	p	class:CommonThreadPool	access:public	signature:()
CommonThreadPool::work	common_thread_pool.h	/^    virtual void work() = 0;$/;"	p	class:CommonThreadPool	access:protected	signature:()
CommonThreadPool::~CommonThreadPool	common_thread_pool.h	/^    virtual ~CommonThreadPool()$/;"	f	class:CommonThreadPool	access:public	signature:()
DEFAULT_RECV_LEN	epoll_socket_manager.h	7;"	d
EPOLL_SIZE	epoll_socket.h	/^    static const int EPOLL_SIZE = 6000;$/;"	m	class:EpollSocket	access:private
ERROR_BUILD_MESSAGE_ERROR	common_define.h	/^const int32_t ERROR_BUILD_MESSAGE_ERROR = 1002;$/;"	v
ERROR_DECRYPT_ERROR	common_define.h	/^const int32_t ERROR_DECRYPT_ERROR = 2;$/;"	v
ERROR_ENCRYPT_ERROR	common_define.h	/^const int32_t ERROR_ENCRYPT_ERROR = 3;$/;"	v
ERROR_GENERAL_ERROR	common_define.h	/^const int32_t ERROR_GENERAL_ERROR = 1;$/;"	v
ERROR_PARSE_MESSAGE_ERROR	common_define.h	/^const int32_t ERROR_PARSE_MESSAGE_ERROR = 1001;$/;"	v
ERROR_SUCCESS	common_define.h	/^const int32_t ERROR_SUCCESS = 0;$/;"	v
ERROR_TIMEOUT_ERROR	common_define.h	/^const int32_t ERROR_TIMEOUT_ERROR = 4;$/;"	v
ERROR_WATERMARK_ERROR	common_define.h	/^const int32_t ERROR_WATERMARK_ERROR = 5;$/;"	v
EVENTS_SIZE	epoll_socket.h	/^    static const int EVENTS_SIZE = EPOLL_SIZE;$/;"	m	class:EpollSocket	access:private
EpollSocket	epoll_socket.cpp	/^EpollSocket::EpollSocket()$/;"	f	class:EpollSocket	signature:()
EpollSocket	epoll_socket.cpp	/^EpollSocket::EpollSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocket	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket	epoll_socket.h	/^    EpollSocket();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket	epoll_socket.h	/^    EpollSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocket	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket	epoll_socket.h	/^class EpollSocket$/;"	c
EpollSocket::EPOLL_SIZE	epoll_socket.h	/^    static const int EPOLL_SIZE = 6000;$/;"	m	class:EpollSocket	access:private
EpollSocket::EVENTS_SIZE	epoll_socket.h	/^    static const int EVENTS_SIZE = EPOLL_SIZE;$/;"	m	class:EpollSocket	access:private
EpollSocket::EpollSocket	epoll_socket.cpp	/^EpollSocket::EpollSocket()$/;"	f	class:EpollSocket	signature:()
EpollSocket::EpollSocket	epoll_socket.cpp	/^EpollSocket::EpollSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocket	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket::EpollSocket	epoll_socket.h	/^    EpollSocket();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::EpollSocket	epoll_socket.h	/^    EpollSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocket	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket::add	epoll_socket.cpp	/^bool EpollSocket::add(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int conn_timeout_ms, int sock_type)$/;"	f	class:EpollSocket	signature:(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int conn_timeout_ms, int sock_type)
EpollSocket::add	epoll_socket.h	/^    bool add(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int conn_timeout_ms, int sock_type);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int conn_timeout_ms, int sock_type)
EpollSocket::bindPort	epoll_socket.cpp	/^bool EpollSocket::bindPort()$/;"	f	class:EpollSocket	signature:()
EpollSocket::bindPort	epoll_socket.h	/^    bool bindPort();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::count	epoll_socket.cpp	/^int EpollSocket::count()$/;"	f	class:EpollSocket	signature:()
EpollSocket::count	epoll_socket.h	/^    int count();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::getAddr	epoll_socket.cpp	/^int EpollSocket::getAddr(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::getAddr	epoll_socket.h	/^    int getAddr(int sock_fd);$/;"	p	class:EpollSocket	access:protected	signature:(int sock_fd)
EpollSocket::getPort	epoll_socket.cpp	/^int EpollSocket::getPort(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::getPort	epoll_socket.h	/^    int getPort(int sock_fd);$/;"	p	class:EpollSocket	access:protected	signature:(int sock_fd)
EpollSocket::getSocketCount	epoll_socket.cpp	/^int EpollSocket::getSocketCount()$/;"	f	class:EpollSocket	signature:()
EpollSocket::getSocketCount	epoll_socket.h	/^    int getSocketCount();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::getTime	epoll_socket.cpp	/^int EpollSocket::getTime(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::getTime	epoll_socket.h	/^    int getTime(int socket_fd);$/;"	p	class:EpollSocket	access:public	signature:(int socket_fd)
EpollSocket::init	epoll_socket.cpp	/^void EpollSocket::init(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocket	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket::init	epoll_socket.h	/^    void init(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocket	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket::listenPort	epoll_socket.cpp	/^bool EpollSocket::listenPort()$/;"	f	class:EpollSocket	signature:()
EpollSocket::listenPort	epoll_socket.h	/^    bool listenPort();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::m_available_socket_num	epoll_socket.h	/^    int m_available_socket_num;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_epoll_fd	epoll_socket.h	/^    int m_epoll_fd;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_events	epoll_socket.h	/^    struct epoll_event m_events[EVENTS_SIZE];$/;"	m	class:EpollSocket	typeref:struct:EpollSocket::epoll_event	access:private
EpollSocket::m_listen_num	epoll_socket.h	/^    int m_listen_num;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_mutex	epoll_socket.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_net_addr	epoll_socket.h	/^    netaddres_info_t *m_net_addr;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_socket	epoll_socket.h	/^    int *m_socket;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_socket_info	epoll_socket.h	/^    sock_info_t m_socket_info[EPOLL_SIZE];$/;"	m	class:EpollSocket	access:private
EpollSocket::m_socket_num	epoll_socket.h	/^    int m_socket_num;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_wait_time_ms	epoll_socket.h	/^    int m_wait_time_ms;$/;"	m	class:EpollSocket	access:private
EpollSocket::removeSocket	epoll_socket.cpp	/^bool EpollSocket::removeSocket(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::removeSocket	epoll_socket.h	/^    bool removeSocket(int sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd)
EpollSocket::setNonblock	epoll_socket.cpp	/^bool EpollSocket::setNonblock(int& sock_fd)$/;"	f	class:EpollSocket	signature:(int& sock_fd)
EpollSocket::setNonblock	epoll_socket.h	/^    bool setNonblock(int& sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int& sock_fd)
EpollSocket::socketAvaiBegin	epoll_socket.cpp	/^SocketAvaiManager EpollSocket::socketAvaiBegin()$/;"	f	class:EpollSocket	signature:()
EpollSocket::socketAvaiBegin	epoll_socket.h	/^    SocketAvaiManager socketAvaiBegin();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::socketAvaiEnd	epoll_socket.cpp	/^SocketAvaiManager EpollSocket::socketAvaiEnd()$/;"	f	class:EpollSocket	signature:()
EpollSocket::socketAvaiEnd	epoll_socket.h	/^    SocketAvaiManager socketAvaiEnd();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::socketInfo	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfo(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::socketInfo	epoll_socket.h	/^    SocketInfoManager socketInfo(int sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd)
EpollSocket::socketInfoBegin	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfoBegin()$/;"	f	class:EpollSocket	signature:()
EpollSocket::socketInfoBegin	epoll_socket.h	/^    SocketInfoManager socketInfoBegin();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::socketInfoEnd	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfoEnd()$/;"	f	class:EpollSocket	signature:()
EpollSocket::socketInfoEnd	epoll_socket.h	/^    SocketInfoManager socketInfoEnd();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::waitAvailableSocket	epoll_socket.cpp	/^int EpollSocket::waitAvailableSocket()$/;"	f	class:EpollSocket	signature:()
EpollSocket::waitAvailableSocket	epoll_socket.h	/^    int waitAvailableSocket();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::~EpollSocket	epoll_socket.cpp	/^EpollSocket::~EpollSocket()$/;"	f	class:EpollSocket	signature:()
EpollSocket::~EpollSocket	epoll_socket.h	/^    ~EpollSocket();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocketManager	epoll_socket_manager.cpp	/^EpollSocketManager::EpollSocketManager()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager	epoll_socket_manager.h	/^    EpollSocketManager();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager	epoll_socket_manager.h	/^class EpollSocketManager$/;"	c
EpollSocketManager::EpollSocketManager	epoll_socket_manager.cpp	/^EpollSocketManager::EpollSocketManager()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::EpollSocketManager	epoll_socket_manager.h	/^    EpollSocketManager();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::closeSocket	epoll_socket_manager.cpp	/^void EpollSocketManager::closeSocket(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
EpollSocketManager::closeSocket	epoll_socket_manager.h	/^    void closeSocket(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
EpollSocketManager::count	epoll_socket_manager.cpp	/^int EpollSocketManager::count()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::count	epoll_socket_manager.h	/^    int count();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::getInstance	epoll_socket_manager.cpp	/^EpollSocketManager* EpollSocketManager::getInstance()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::getInstance	epoll_socket_manager.h	/^    static EpollSocketManager* getInstance();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::getSocketInfo	epoll_socket_manager.cpp	/^SocketInfoManager EpollSocketManager::getSocketInfo(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
EpollSocketManager::getSocketInfo	epoll_socket_manager.h	/^    SocketInfoManager getSocketInfo(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
EpollSocketManager::initSocket	epoll_socket_manager.cpp	/^bool EpollSocketManager::initSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocketManager	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocketManager::initSocket	epoll_socket_manager.h	/^    bool initSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocketManager	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocketManager::m_epoll_socket	epoll_socket_manager.h	/^    EpollSocket m_epoll_socket;$/;"	m	class:EpollSocketManager	access:private
EpollSocketManager::m_epoll_socket_manager_instance	epoll_socket_manager.cpp	/^EpollSocketManager* EpollSocketManager::m_epoll_socket_manager_instance = new EpollSocketManager();$/;"	m	class:EpollSocketManager	file:
EpollSocketManager::m_epoll_socket_manager_instance	epoll_socket_manager.h	/^    static EpollSocketManager* m_epoll_socket_manager_instance;$/;"	m	class:EpollSocketManager	access:private
EpollSocketManager::putIntoEpoll	epoll_socket_manager.cpp	/^bool EpollSocketManager::putIntoEpoll(int fd, int cur_time,  int listen_port, int client_port, int ip_addr, int conn_timeout_ms, int sock_type)$/;"	f	class:EpollSocketManager	signature:(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int conn_timeout_ms, int sock_type)
EpollSocketManager::putIntoEpoll	epoll_socket_manager.h	/^    bool putIntoEpoll(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int conn_timeout_ms, int sock_type = SOCKET_TYPE_CLIENT);$/;"	p	class:EpollSocketManager	access:public	signature:(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int conn_timeout_ms, int sock_type = SOCKET_TYPE_CLIENT)
EpollSocketManager::removeSocket	epoll_socket_manager.cpp	/^bool EpollSocketManager::removeSocket(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
EpollSocketManager::removeSocket	epoll_socket_manager.h	/^    bool removeSocket(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
EpollSocketManager::socketAvaiBegin	epoll_socket_manager.cpp	/^SocketAvaiManager EpollSocketManager::socketAvaiBegin()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::socketAvaiBegin	epoll_socket_manager.h	/^    SocketAvaiManager socketAvaiBegin();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::socketAvaiEnd	epoll_socket_manager.cpp	/^SocketAvaiManager EpollSocketManager::socketAvaiEnd()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::socketAvaiEnd	epoll_socket_manager.h	/^    SocketAvaiManager socketAvaiEnd();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::socketInfoBegin	epoll_socket_manager.cpp	/^SocketInfoManager EpollSocketManager::socketInfoBegin()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::socketInfoBegin	epoll_socket_manager.h	/^    SocketInfoManager socketInfoBegin();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::socketInfoEnd	epoll_socket_manager.cpp	/^SocketInfoManager EpollSocketManager::socketInfoEnd()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::socketInfoEnd	epoll_socket_manager.h	/^    SocketInfoManager socketInfoEnd();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::timeout	epoll_socket_manager.cpp	/^bool EpollSocketManager::timeout(int cur_time_ms)$/;"	f	class:EpollSocketManager	signature:(int cur_time_ms)
EpollSocketManager::timeout	epoll_socket_manager.h	/^    bool timeout(int cur_time_ms);$/;"	p	class:EpollSocketManager	access:public	signature:(int cur_time_ms)
EpollSocketManager::waitAvailableSocket	epoll_socket_manager.cpp	/^int EpollSocketManager::waitAvailableSocket()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::waitAvailableSocket	epoll_socket_manager.h	/^    int waitAvailableSocket();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::~EpollSocketManager	epoll_socket_manager.cpp	/^EpollSocketManager::~EpollSocketManager()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::~EpollSocketManager	epoll_socket_manager.h	/^    ~EpollSocketManager();$/;"	p	class:EpollSocketManager	access:public	signature:()
MESSAGE_CAL_SUM_REQ	common_define.h	6;"	d
MESSAGE_CAL_SUM_RSP	common_define.h	7;"	d
MSG_SIGN	common_define.h	4;"	d
Message	message.cpp	/^Message::Message()$/;"	f	class:Message	signature:()
Message	message.h	/^    Message();$/;"	p	class:Message	access:public	signature:()
Message	message.h	/^class Message$/;"	c
Message::Message	message.cpp	/^Message::Message()$/;"	f	class:Message	signature:()
Message::Message	message.h	/^    Message();$/;"	p	class:Message	access:public	signature:()
Message::buildBody	message.h	/^    virtual bool buildBody() = 0;$/;"	p	class:Message	access:public	signature:()
Message::buildMessage	message.cpp	/^bool Message::buildMessage(const Message* message)$/;"	f	class:Message	signature:(const Message* message)
Message::buildMessage	message.h	/^    bool buildMessage(const Message* message = NULL);$/;"	p	class:Message	access:public	signature:(const Message* message = NULL)
Message::copyCommonParameter	message.h	/^    void copyCommonParameter(const Message* message);$/;"	p	class:Message	access:private	signature:(const Message* message)
Message::getMessageType	message.cpp	/^int Message::getMessageType(const char* buffer,int buffer_size,int sign)$/;"	f	class:Message	signature:(const char* buffer,int buffer_size,int sign)
Message::getMessageType	message.h	/^    static int getMessageType(const char* buffer,int buffer_size,int sign);$/;"	p	class:Message	access:public	signature:(const char* buffer,int buffer_size,int sign)
Message::m_buffer	message.h	/^    string m_buffer;$/;"	m	class:Message	access:public
Message::m_client_port	message.h	/^    int m_client_port;$/;"	m	class:Message	access:public
Message::m_ip_addr	message.h	/^    int m_ip_addr;$/;"	m	class:Message	access:public
Message::m_listen_port	message.h	/^    int m_listen_port;$/;"	m	class:Message	access:public
Message::m_message_header	message.h	/^    message_header_t m_message_header;$/;"	m	class:Message	access:public
Message::m_msg_body_str	message.h	/^    string m_msg_body_str;$/;"	m	class:Message	access:public
Message::m_socket_fd	message.h	/^    int m_socket_fd;$/;"	m	class:Message	access:public
Message::m_task_sign	message.h	/^    int m_task_sign;$/;"	m	class:Message	access:public
Message::messageSequence	message.cpp	/^int Message::messageSequence()$/;"	f	class:Message	signature:()
Message::messageSequence	message.h	/^    int messageSequence();$/;"	p	class:Message	access:public	signature:()
Message::messageType	message.cpp	/^int Message::messageType()$/;"	f	class:Message	signature:()
Message::messageType	message.h	/^    int messageType();$/;"	p	class:Message	access:public	signature:()
Message::parseBody	message.h	/^    virtual bool parseBody() = 0;$/;"	p	class:Message	access:public	signature:()
Message::parseHeader	message.cpp	/^bool Message::parseHeader()$/;"	f	class:Message	signature:()
Message::parseHeader	message.h	/^    bool parseHeader();$/;"	p	class:Message	access:public	signature:()
Message::parseMessage	message.cpp	/^bool Message::parseMessage()$/;"	f	class:Message	signature:()
Message::parseMessage	message.h	/^    bool parseMessage();$/;"	p	class:Message	access:public	signature:()
Message::setHeaderControl	message.h	/^    virtual void setHeaderControl() = 0;$/;"	p	class:Message	access:public	signature:()
Message::version	message.cpp	/^int Message::version()$/;"	f	class:Message	signature:()
Message::version	message.h	/^    int version();$/;"	p	class:Message	access:public	signature:()
Message::~Message	message.cpp	/^Message::~Message()$/;"	f	class:Message	signature:()
Message::~Message	message.h	/^    virtual ~Message();$/;"	p	class:Message	access:public	signature:()
MessageFactory	message_factory.cpp	/^MessageFactory::MessageFactory()$/;"	f	class:MessageFactory	signature:()
MessageFactory	message_factory.h	/^    MessageFactory();$/;"	p	class:MessageFactory	access:public	signature:()
MessageFactory	message_factory.h	/^class MessageFactory$/;"	c
MessageFactory::MessageFactory	message_factory.cpp	/^MessageFactory::MessageFactory()$/;"	f	class:MessageFactory	signature:()
MessageFactory::MessageFactory	message_factory.h	/^    MessageFactory();$/;"	p	class:MessageFactory	access:public	signature:()
MessageFactory::createMessage	message_factory.cpp	/^Message* MessageFactory::createMessage(int message_type)$/;"	f	class:MessageFactory	signature:(int message_type)
MessageFactory::createMessage	message_factory.h	/^    static Message* createMessage(int message_type);$/;"	p	class:MessageFactory	access:public	signature:(int message_type)
MessageFactory::~MessageFactory	message_factory.cpp	/^MessageFactory::~MessageFactory()$/;"	f	class:MessageFactory	signature:()
MessageFactory::~MessageFactory	message_factory.h	/^    ~MessageFactory();$/;"	p	class:MessageFactory	access:public	signature:()
MessageQueue	message.h	/^typedef CommonQueue<Message*> MessageQueue;$/;"	t
NetworkManager	network_manager.cpp	/^NetworkManager::NetworkManager()$/;"	f	class:NetworkManager	signature:()
NetworkManager	network_manager.h	/^    NetworkManager();$/;"	p	class:NetworkManager	access:public	signature:()
NetworkManager	network_manager.h	/^class NetworkManager$/;"	c
NetworkManager::NetworkManager	network_manager.cpp	/^NetworkManager::NetworkManager()$/;"	f	class:NetworkManager	signature:()
NetworkManager::NetworkManager	network_manager.h	/^    NetworkManager();$/;"	p	class:NetworkManager	access:public	signature:()
NetworkManager::clientLongConnectPush	network_manager.cpp	/^bool NetworkManager::clientLongConnectPush(Message* message, int waitMs)$/;"	f	class:NetworkManager	signature:(Message* message, int waitMs)
NetworkManager::clientLongConnectPush	network_manager.h	/^    static bool clientLongConnectPush(Message* message, int waitMs);$/;"	p	class:NetworkManager	access:public	signature:(Message* message, int waitMs)
NetworkManager::getClientSendQueue	network_manager.cpp	/^MessageQueue* NetworkManager::getClientSendQueue(int num)$/;"	f	class:NetworkManager	signature:(int num)
NetworkManager::getClientSendQueue	network_manager.h	/^    MessageQueue* getClientSendQueue(int num);$/;"	p	class:NetworkManager	access:public	signature:(int num)
NetworkManager::getInstance	network_manager.cpp	/^NetworkManager* NetworkManager::getInstance()$/;"	f	class:NetworkManager	signature:()
NetworkManager::getInstance	network_manager.h	/^    static NetworkManager* getInstance();$/;"	p	class:NetworkManager	access:public	signature:()
NetworkManager::getMessageQueue	network_manager.cpp	/^MessageQueue* NetworkManager::getMessageQueue()$/;"	f	class:NetworkManager	signature:()
NetworkManager::getMessageQueue	network_manager.h	/^    MessageQueue* getMessageQueue();$/;"	p	class:NetworkManager	access:public	signature:()
NetworkManager::getServerSendQueue	network_manager.h	/^    MessageQueue* getServerSendQueue();$/;"	p	class:NetworkManager	access:public	signature:()
NetworkManager::initClientLongConnectSend	network_manager.cpp	/^void NetworkManager::initClientLongConnectSend($/;"	f	class:NetworkManager	signature:( uint32_t client_long_connect_send_thread_count)
NetworkManager::initClientLongConnectSend	network_manager.h	/^    void initClientLongConnectSend(uint32_t client_long_connect_send_thread_count);$/;"	p	class:NetworkManager	access:public	signature:(uint32_t client_long_connect_send_thread_count)
NetworkManager::initClientRecv	network_manager.cpp	/^void NetworkManager::initClientRecv(int check_internal, int recv_thread_count)$/;"	f	class:NetworkManager	signature:(int check_internal, int recv_thread_count)
NetworkManager::initClientRecv	network_manager.h	/^    void initClientRecv(int check_internal, int recv_thread_count);$/;"	p	class:NetworkManager	access:public	signature:(int check_internal, int recv_thread_count)
NetworkManager::initServerLongConnectSend	network_manager.cpp	/^void NetworkManager::initServerLongConnectSend($/;"	f	class:NetworkManager	signature:( uint32_t server_long_connect_send_thread_count, const char * server_ip, short server_port, int send_timeout_sec, int send_buf_size)
NetworkManager::initServerLongConnectSend	network_manager.h	/^    void initServerLongConnectSend($/;"	p	class:NetworkManager	access:public	signature:( uint32_t server_long_connect_send_thread_count, const char * server_ip, short server_port, int send_timeout_sec, int send_buf_size)
NetworkManager::initSocket	network_manager.cpp	/^bool NetworkManager::initSocket(netaddres_info_t* netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:NetworkManager	signature:(netaddres_info_t* netaddr, const int& addr_num, const int& wait_time_ms)
NetworkManager::initSocket	network_manager.h	/^    bool initSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:NetworkManager	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
NetworkManager::m_client_connection_handler	network_manager.h	/^    ClientConnectionHandler* m_client_connection_handler;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_client_long_connect_message_send_queues	network_manager.h	/^    MessageQueue** m_client_long_connect_message_send_queues; $/;"	m	class:NetworkManager	access:private
NetworkManager::m_client_long_connect_send_handlers	network_manager.h	/^    ClientSendHandler** m_client_long_connect_send_handlers;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_client_long_connect_send_thread_count	network_manager.h	/^    uint32_t m_client_long_connect_send_thread_count;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_client_receive_thread_count	network_manager.h	/^    int m_client_receive_thread_count;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_client_receiver_handler	network_manager.h	/^    ClientReceiverHandler* m_client_receiver_handler;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_instance	network_manager.cpp	/^NetworkManager* NetworkManager::m_instance = new NetworkManager();$/;"	m	class:NetworkManager	file:
NetworkManager::m_instance	network_manager.h	/^    static NetworkManager* m_instance;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_message_queue	network_manager.h	/^    MessageQueue* m_message_queue;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_queue_size	network_manager.h	/^    int m_queue_size;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_server_long_connect_message_send_queue	network_manager.h	/^    MessageQueue* m_server_long_connect_message_send_queue;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_server_long_connect_send_handler	network_manager.h	/^    ServerSendHandler* m_server_long_connect_send_handler;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_server_long_connect_send_thread_count	network_manager.h	/^    uint32_t m_server_long_connect_send_thread_count;$/;"	m	class:NetworkManager	access:private
NetworkManager::m_sock_queue	network_manager.h	/^    ClientSocketQueue* m_sock_queue;$/;"	m	class:NetworkManager	access:private
NetworkManager::messagePop	network_manager.cpp	/^bool NetworkManager::messagePop(Message*& message, int waitMs)$/;"	f	class:NetworkManager	signature:(Message*& message, int waitMs)
NetworkManager::messagePop	network_manager.h	/^    static bool messagePop(Message*& message, int waitMs);$/;"	p	class:NetworkManager	access:public	signature:(Message*& message, int waitMs)
NetworkManager::setQueueSize	log/test.INFO	/^I0530 13:08:34.621222 18261 network_manager.cpp:34] NetworkManager::setQueueSize(), queue_size[100]$/;"	p	class:NetworkManager	file:	signature:()
NetworkManager::setQueueSize	log/test.ubuntu.handy.log.INFO.20140530-012643.16182	/^I0530 01:26:43.342330 16182 network_manager.cpp:34] NetworkManager::setQueueSize(), queue_size[100]$/;"	p	class:NetworkManager	file:	signature:()
NetworkManager::setQueueSize	log/test.ubuntu.handy.log.INFO.20140530-023034.16407	/^I0530 02:30:34.994678 16407 network_manager.cpp:34] NetworkManager::setQueueSize(), queue_size[100]$/;"	p	class:NetworkManager	file:	signature:()
NetworkManager::setQueueSize	log/test.ubuntu.handy.log.INFO.20140530-130834.18261	/^I0530 13:08:34.621222 18261 network_manager.cpp:34] NetworkManager::setQueueSize(), queue_size[100]$/;"	p	class:NetworkManager	file:	signature:()
NetworkManager::setQueueSize	network_manager.cpp	/^void NetworkManager::setQueueSize(int queue_size)$/;"	f	class:NetworkManager	signature:(int queue_size)
NetworkManager::setQueueSize	network_manager.h	/^    void setQueueSize(int queue_size);$/;"	p	class:NetworkManager	access:public	signature:(int queue_size)
NetworkManager::start	network_manager.cpp	/^bool NetworkManager::start()$/;"	f	class:NetworkManager	signature:()
NetworkManager::start	network_manager.h	/^    bool start();$/;"	p	class:NetworkManager	access:public	signature:()
NetworkManager::waitThreadsTermination	network_manager.cpp	/^void NetworkManager::waitThreadsTermination()$/;"	f	class:NetworkManager	signature:()
NetworkManager::waitThreadsTermination	network_manager.h	/^    void waitThreadsTermination();$/;"	p	class:NetworkManager	access:public	signature:()
NetworkManager::~NetworkManager	network_manager.cpp	/^NetworkManager::~NetworkManager()$/;"	f	class:NetworkManager	signature:()
NetworkManager::~NetworkManager	network_manager.h	/^    ~NetworkManager();$/;"	p	class:NetworkManager	access:public	signature:()
SOCKET_ERROR	epoll_socket.h	/^enum SOCKET_ERROR{$/;"	g
SOCKET_ERROR_BODY_SIZE_INVALID	epoll_socket.h	/^    SOCKET_ERROR_BODY_SIZE_INVALID$/;"	e	enum:SOCKET_ERROR
SOCKET_ERROR_HEADER_SIZE_INVALID	epoll_socket.h	/^    SOCKET_ERROR_HEADER_SIZE_INVALID,$/;"	e	enum:SOCKET_ERROR
SOCKET_ERROR_PEER_CLOSE	epoll_socket.h	/^    SOCKET_ERROR_PEER_CLOSE,$/;"	e	enum:SOCKET_ERROR
SOCKET_ERROR_SIGN_INVALID	epoll_socket.h	/^    SOCKET_ERROR_SIGN_INVALID,$/;"	e	enum:SOCKET_ERROR
SOCKET_ERROR_SUCCESS	epoll_socket.h	/^    SOCKET_ERROR_SUCCESS,$/;"	e	enum:SOCKET_ERROR
SOCKET_ERROR_UNKNOW_OCCUR	epoll_socket.h	/^    SOCKET_ERROR_UNKNOW_OCCUR,$/;"	e	enum:SOCKET_ERROR
SOCKET_ERROR_WAIT_TRY_AGAIN	epoll_socket.h	/^    SOCKET_ERROR_WAIT_TRY_AGAIN,$/;"	e	enum:SOCKET_ERROR
SOCKET_TYPE_CLIENT	epoll_socket.h	/^    SOCKET_TYPE_CLIENT$/;"	e	enum:SocketType
SOCKET_TYPE_SERVER	epoll_socket.h	/^    SOCKET_TYPE_SERVER,$/;"	e	enum:SocketType
SOCKET_TYPE_UNKNOWN	epoll_socket.h	/^    SOCKET_TYPE_UNKNOWN = 0,$/;"	e	enum:SocketType
STACK_SIZE	common_thread_pool.h	/^    const static int STACK_SIZE = (1024);$/;"	m	class:CommonThreadPool	access:private
SendSocket	send_socket.cpp	/^	SendSocket()$/;"	f	class:SendSocket	signature:()
SendSocket	send_socket.h	/^    SendSocket();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket	send_socket.h	/^class SendSocket$/;"	c
SendSocket::SendSocket	send_socket.cpp	/^	SendSocket()$/;"	f	class:SendSocket	signature:()
SendSocket::SendSocket	send_socket.h	/^    SendSocket();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::closeSocket	send_socket.cpp	/^	closeSocket()$/;"	f	class:SendSocket	signature:()
SendSocket::closeSocket	send_socket.h	/^    void closeSocket();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::connectTo	send_socket.cpp	/^	connectTo()$/;"	f	class:SendSocket	signature:()
SendSocket::connectTo	send_socket.h	/^    bool connectTo();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::get_fd	send_socket.h	/^    int get_fd(){ return m_send_socket_fd; };$/;"	f	class:SendSocket	access:public	signature:()
SendSocket::get_ip	send_socket.cpp	/^	get_ip()$/;"	f	class:SendSocket	signature:()
SendSocket::get_ip	send_socket.h	/^    const char* get_ip();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::get_port	send_socket.cpp	/^	get_port()$/;"	f	class:SendSocket	signature:()
SendSocket::get_port	send_socket.h	/^    short get_port();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::get_sock_fd	send_socket.cpp	/^	get_sock_fd()$/;"	f	class:SendSocket	signature:()
SendSocket::get_sock_fd	send_socket.h	/^    int get_sock_fd();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::init	send_socket.cpp	/^	init(const char * ip, const short& port, const int& send_timeout_sec, const int& send_buf_size)$/;"	f	class:SendSocket	signature:(const char * ip, const short& port, const int& send_timeout_sec, const int& send_buf_size)
SendSocket::init	send_socket.h	/^    bool init(const char* ip, const short& port, const int& send_timeout_sec, const int& send_buf_size);$/;"	p	class:SendSocket	access:public	signature:(const char* ip, const short& port, const int& send_timeout_sec, const int& send_buf_size)
SendSocket::isConnected	send_socket.cpp	/^	isConnected()$/;"	f	class:SendSocket	signature:()
SendSocket::isConnected	send_socket.h	/^    bool isConnected();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::isReconnect	send_socket.cpp	/^	isReconnect()$/;"	f	class:SendSocket	signature:()
SendSocket::isReconnect	send_socket.h	/^    bool isReconnect();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::m_ip	send_socket.h	/^    uint32_t m_ip;$/;"	m	class:SendSocket	access:public
SendSocket::m_ip_string	send_socket.h	/^    char m_ip_string[16];$/;"	m	class:SendSocket	access:public
SendSocket::m_port	send_socket.h	/^    short m_port;$/;"	m	class:SendSocket	access:public
SendSocket::m_reconnect	send_socket.h	/^    short m_reconnect;$/;"	m	class:SendSocket	access:public
SendSocket::m_send_buf_size	send_socket.h	/^    int m_send_buf_size;$/;"	m	class:SendSocket	access:public
SendSocket::m_send_socket_fd	send_socket.h	/^    int m_send_socket_fd;$/;"	m	class:SendSocket	access:public
SendSocket::m_send_timeout_sec	send_socket.h	/^    int m_send_timeout_sec;$/;"	m	class:SendSocket	access:public
SendSocket::reconnectTo	send_socket.cpp	/^	reconnectTo()$/;"	f	class:SendSocket	signature:()
SendSocket::reconnectTo	send_socket.h	/^    bool reconnectTo();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::recvData	send_socket.cpp	/^	recvData(int fd_sock, char* buffer, int recv_len,int& state)$/;"	f	class:SendSocket	signature:(int fd_sock, char* buffer, int recv_len,int& state)
SendSocket::recvData	send_socket.h	/^    static int recvData(int fd_sock, char* buffer, int recv_len, int& state);$/;"	p	class:SendSocket	access:public	signature:(int fd_sock, char* buffer, int recv_len, int& state)
SendSocket::sendData	send_socket.cpp	/^	sendData(const char* data, int data_len)$/;"	f	class:SendSocket	signature:(const char* data, int data_len)
SendSocket::sendData	send_socket.h	/^    bool sendData(const char* data, int data_len);$/;"	p	class:SendSocket	access:public	signature:(const char* data, int data_len)
SendSocket::sendDataRetry	send_socket.cpp	/^	sendDataRetry(const char * data, unsigned int data_len)$/;"	f	class:SendSocket	signature:(const char * data, unsigned int data_len)
SendSocket::sendDataRetry	send_socket.h	/^    bool sendDataRetry(const char* data, unsigned int data_len);$/;"	p	class:SendSocket	access:public	signature:(const char* data, unsigned int data_len)
SendSocket::setBlock	send_socket.cpp	/^	setBlock()$/;"	f	class:SendSocket	signature:()
SendSocket::setBlock	send_socket.h	/^    bool setBlock();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::setLinger	send_socket.cpp	/^	setLinger(int onoff, int linger)$/;"	f	class:SendSocket	signature:(int onoff, int linger)
SendSocket::setLinger	send_socket.h	/^    bool setLinger(int onoff, int linger);$/;"	p	class:SendSocket	access:public	signature:(int onoff, int linger)
SendSocket::setNonblock	send_socket.cpp	/^	setNonblock()$/;"	f	class:SendSocket	signature:()
SendSocket::setNonblock	send_socket.h	/^    bool setNonblock();$/;"	p	class:SendSocket	access:public	signature:()
SendSocket::setRecvBuf	send_socket.cpp	/^bool SendSocket::setRecvBuf(uint32_t buf_size)$/;"	f	class:SendSocket	signature:(uint32_t buf_size)
SendSocket::setRecvBuf	send_socket.h	/^    bool setRecvBuf(uint32_t buf_size);$/;"	p	class:SendSocket	access:public	signature:(uint32_t buf_size)
SendSocket::setRecvTimeout	send_socket.cpp	/^	setRecvTimeout(int timeout_sec)$/;"	f	class:SendSocket	signature:(int timeout_sec)
SendSocket::setRecvTimeout	send_socket.h	/^    bool setRecvTimeout(int timeout_sec);$/;"	p	class:SendSocket	access:public	signature:(int timeout_sec)
SendSocket::setSendBuf	send_socket.cpp	/^bool SendSocket::setSendBuf(uint32_t buf_size)$/;"	f	class:SendSocket	signature:(uint32_t buf_size)
SendSocket::setSendBuf	send_socket.h	/^    bool setSendBuf(uint32_t buf_size);$/;"	p	class:SendSocket	access:public	signature:(uint32_t buf_size)
SendSocket::setSendTimeout	send_socket.cpp	/^	setSendTimeout(int timeout_sec)$/;"	f	class:SendSocket	signature:(int timeout_sec)
SendSocket::setSendTimeout	send_socket.h	/^    bool setSendTimeout(int timeout_sec);$/;"	p	class:SendSocket	access:public	signature:(int timeout_sec)
SendSocket::ssendData	send_socket.cpp	/^bool SendSocket::ssendData(int socket_fd,const char * send_buf, const int& send_bytes, const int& timeout_ms)$/;"	f	class:SendSocket	signature:(int socket_fd,const char * send_buf, const int& send_bytes, const int& timeout_ms)
SendSocket::ssendData	send_socket.h	/^    static bool ssendData(int socket_fd,const char * send_buf, const int& send_bytes, const int& timeout_ms = 100);$/;"	p	class:SendSocket	access:public	signature:(int socket_fd,const char * send_buf, const int& send_bytes, const int& timeout_ms = 100)
SendSocket::~SendSocket	send_socket.cpp	/^	~SendSocket()$/;"	f	class:SendSocket	signature:()
SendSocket::~SendSocket	send_socket.h	/^    ~SendSocket();$/;"	p	class:SendSocket	access:public	signature:()
ServerMsgHandler	server_msg_handler.cpp	/^ServerMsgHandler::ServerMsgHandler(int thread_count) : CommonThreadPool(thread_count)$/;"	f	class:ServerMsgHandler	signature:(int thread_count)
ServerMsgHandler	server_msg_handler.h	/^    ServerMsgHandler(int thread_count);$/;"	p	class:ServerMsgHandler	access:public	signature:(int thread_count)
ServerMsgHandler	server_msg_handler.h	/^class ServerMsgHandler : public CommonThreadPool$/;"	c	inherits:CommonThreadPool
ServerMsgHandler::ServerMsgHandler	server_msg_handler.cpp	/^ServerMsgHandler::ServerMsgHandler(int thread_count) : CommonThreadPool(thread_count)$/;"	f	class:ServerMsgHandler	signature:(int thread_count)
ServerMsgHandler::ServerMsgHandler	server_msg_handler.h	/^    ServerMsgHandler(int thread_count);$/;"	p	class:ServerMsgHandler	access:public	signature:(int thread_count)
ServerMsgHandler::calculateSum	server_msg_handler.cpp	/^int ServerMsgHandler::calculateSum(Message* message,Message*& rsp_message)$/;"	f	class:ServerMsgHandler	signature:(Message* message,Message*& rsp_message)
ServerMsgHandler::calculateSum	server_msg_handler.h	/^    int calculateSum(Message* message,Message*& rsp_message);$/;"	p	class:ServerMsgHandler	access:private	signature:(Message* message,Message*& rsp_message)
ServerMsgHandler::work	server_msg_handler.cpp	/^void ServerMsgHandler::work()$/;"	f	class:ServerMsgHandler	signature:()
ServerMsgHandler::work	server_msg_handler.h	/^    virtual void work();$/;"	p	class:ServerMsgHandler	access:protected	signature:()
ServerMsgHandler::~ServerMsgHandler	server_msg_handler.cpp	/^ServerMsgHandler::~ServerMsgHandler()$/;"	f	class:ServerMsgHandler	signature:()
ServerMsgHandler::~ServerMsgHandler	server_msg_handler.h	/^    virtual ~ServerMsgHandler();$/;"	p	class:ServerMsgHandler	access:public	signature:()
ServerSendHandler	server_send_handler.cpp	/^ServerSendHandler::ServerSendHandler(int pool_size) : CommonThreadPool(pool_size)$/;"	f	class:ServerSendHandler	signature:(int pool_size)
ServerSendHandler	server_send_handler.h	/^    ServerSendHandler(int pool_size);$/;"	p	class:ServerSendHandler	access:public	signature:(int pool_size)
ServerSendHandler	server_send_handler.h	/^class ServerSendHandler : public CommonThreadPool$/;"	c	inherits:CommonThreadPool
ServerSendHandler::ServerSendHandler	server_send_handler.cpp	/^ServerSendHandler::ServerSendHandler(int pool_size) : CommonThreadPool(pool_size)$/;"	f	class:ServerSendHandler	signature:(int pool_size)
ServerSendHandler::ServerSendHandler	server_send_handler.h	/^    ServerSendHandler(int pool_size);$/;"	p	class:ServerSendHandler	access:public	signature:(int pool_size)
ServerSendHandler::initQueues	server_send_handler.cpp	/^void ServerSendHandler::initQueues(MessageQueue* message_send_queue)$/;"	f	class:ServerSendHandler	signature:(MessageQueue* message_send_queue)
ServerSendHandler::initQueues	server_send_handler.h	/^    void initQueues(MessageQueue* message_send_queue);$/;"	p	class:ServerSendHandler	access:public	signature:(MessageQueue* message_send_queue)
ServerSendHandler::initSocket	server_send_handler.cpp	/^void ServerSendHandler::initSocket(const char * ip, short port, int send_timeout_sec, int send_buf_size)$/;"	f	class:ServerSendHandler	signature:(const char * ip, short port, int send_timeout_sec, int send_buf_size)
ServerSendHandler::initSocket	server_send_handler.h	/^    void initSocket(const char* ip, short port, int send_timeout_sec, int send_buf_size);$/;"	p	class:ServerSendHandler	access:public	signature:(const char* ip, short port, int send_timeout_sec, int send_buf_size)
ServerSendHandler::m_ip	server_send_handler.h	/^    std::string m_ip;$/;"	m	class:ServerSendHandler	access:private
ServerSendHandler::m_message_send_queue	server_send_handler.h	/^    MessageQueue* m_message_send_queue;$/;"	m	class:ServerSendHandler	access:private
ServerSendHandler::m_port	server_send_handler.h	/^	short m_port;$/;"	m	class:ServerSendHandler	access:private
ServerSendHandler::m_send_buf_size	server_send_handler.h	/^	int m_send_buf_size;$/;"	m	class:ServerSendHandler	access:private
ServerSendHandler::m_send_timeout_sec	server_send_handler.h	/^	int m_send_timeout_sec;$/;"	m	class:ServerSendHandler	access:private
ServerSendHandler::work	server_send_handler.cpp	/^void ServerSendHandler::work()$/;"	f	class:ServerSendHandler	signature:()
ServerSendHandler::work	server_send_handler.h	/^    virtual void work();$/;"	p	class:ServerSendHandler	access:protected	signature:()
ServerSendHandler::~ServerSendHandler	server_send_handler.cpp	/^ServerSendHandler::~ServerSendHandler()$/;"	f	class:ServerSendHandler	signature:()
ServerSendHandler::~ServerSendHandler	server_send_handler.h	/^    ~ServerSendHandler();$/;"	p	class:ServerSendHandler	access:public	signature:()
ServerSendSocket	server_send_socket.cpp	/^ServerSendSocket::ServerSendSocket()$/;"	f	class:ServerSendSocket	signature:()
ServerSendSocket	server_send_socket.h	/^    ServerSendSocket();$/;"	p	class:ServerSendSocket	access:public	signature:()
ServerSendSocket	server_send_socket.h	/^class ServerSendSocket$/;"	c
ServerSendSocket::ServerSendSocket	server_send_socket.cpp	/^ServerSendSocket::ServerSendSocket()$/;"	f	class:ServerSendSocket	signature:()
ServerSendSocket::ServerSendSocket	server_send_socket.h	/^    ServerSendSocket();$/;"	p	class:ServerSendSocket	access:public	signature:()
ServerSendSocket::connectServer	server_send_socket.cpp	/^bool ServerSendSocket::connectServer(const uint32_t& conn_timeout_ms)$/;"	f	class:ServerSendSocket	signature:(const uint32_t& conn_timeout_ms)
ServerSendSocket::connectServer	server_send_socket.h	/^    bool connectServer(const uint32_t& conn_timeout_ms);$/;"	p	class:ServerSendSocket	access:public	signature:(const uint32_t& conn_timeout_ms)
ServerSendSocket::initSocket	server_send_socket.cpp	/^void ServerSendSocket::initSocket(const char * ip,const short& port,const int& send_timeout_sec,const int& send_buf_size)$/;"	f	class:ServerSendSocket	signature:(const char * ip,const short& port,const int& send_timeout_sec,const int& send_buf_size)
ServerSendSocket::initSocket	server_send_socket.h	/^    void initSocket(const char * ip, const short& port, const int& send_timeout_sec, const int& send_buf_size);$/;"	p	class:ServerSendSocket	access:public	signature:(const char * ip, const short& port, const int& send_timeout_sec, const int& send_buf_size)
ServerSendSocket::m_send_socket	server_send_socket.h	/^    SendSocket m_send_socket;$/;"	m	class:ServerSendSocket	access:private
ServerSendSocket::sendData	server_send_socket.cpp	/^bool ServerSendSocket::sendData(const Message* message,const int& timeout_ms)$/;"	f	class:ServerSendSocket	signature:(const Message* message,const int& timeout_ms)
ServerSendSocket::sendData	server_send_socket.h	/^    bool sendData(const Message* message,const int& timeout_ms = 100);$/;"	p	class:ServerSendSocket	access:public	signature:(const Message* message,const int& timeout_ms = 100)
ServerSendSocket::~ServerSendSocket	server_send_socket.cpp	/^ServerSendSocket::~ServerSendSocket()$/;"	f	class:ServerSendSocket	signature:()
ServerSendSocket::~ServerSendSocket	server_send_socket.h	/^    ~ServerSendSocket();$/;"	p	class:ServerSendSocket	access:public	signature:()
SocketAvaiManager	epoll_socket.h	/^    SocketAvaiManager(int index, EpollSocket* epoll_socket_ptr) : m_fd_index(index), m_epoll_socket_ptr(epoll_socket_ptr)$/;"	f	class:SocketAvaiManager	access:public	signature:(int index, EpollSocket* epoll_socket_ptr)
SocketAvaiManager	epoll_socket.h	/^class SocketAvaiManager$/;"	c
SocketAvaiManager::SocketAvaiManager	epoll_socket.h	/^    SocketAvaiManager(int index, EpollSocket* epoll_socket_ptr) : m_fd_index(index), m_epoll_socket_ptr(epoll_socket_ptr)$/;"	f	class:SocketAvaiManager	access:public	signature:(int index, EpollSocket* epoll_socket_ptr)
SocketAvaiManager::acceptSocket	epoll_socket.h	/^    int acceptSocket(struct sockaddr_in* client_addr)$/;"	f	class:SocketAvaiManager	access:public	signature:(struct sockaddr_in* client_addr)
SocketAvaiManager::available	epoll_socket.h	/^    bool available()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::close	epoll_socket.h	/^    void close()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::connTimeoutMs	epoll_socket.h	/^    int connTimeoutMs()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getAddr	epoll_socket.h	/^    int getAddr()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getListenPort	epoll_socket.h	/^    int getListenPort()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getPort	epoll_socket.h	/^    int getPort()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getSocketFd	epoll_socket.h	/^    int getSocketFd()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getTaskSign	epoll_socket.h	/^    int getTaskSign()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::inUsed	epoll_socket.h	/^    bool inUsed()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::isListener	epoll_socket.h	/^    bool isListener()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::isOk	epoll_socket.h	/^    bool isOk()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::isWritable	epoll_socket.h	/^    bool isWritable()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::m_epoll_socket_ptr	epoll_socket.h	/^    EpollSocket* m_epoll_socket_ptr;$/;"	m	class:SocketAvaiManager	access:private
SocketAvaiManager::m_fd_index	epoll_socket.h	/^    int m_fd_index;$/;"	m	class:SocketAvaiManager	access:private
SocketAvaiManager::m_socket_fd	epoll_socket.h	/^    int m_socket_fd;$/;"	m	class:SocketAvaiManager	access:private
SocketAvaiManager::operator !=	epoll_socket.h	/^    bool operator != (SocketAvaiManager socket_avai_manager)$/;"	f	class:SocketAvaiManager	access:public	signature:(SocketAvaiManager socket_avai_manager)
SocketAvaiManager::operator ++	epoll_socket.h	/^    SocketAvaiManager& operator ++ ()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketInfoManager	epoll_socket.h	/^    SocketInfoManager(int index, EpollSocket* epoll_socket_ptr) : m_fd_index(index), m_epoll_socket_ptr(epoll_socket_ptr)$/;"	f	class:SocketInfoManager	access:public	signature:(int index, EpollSocket* epoll_socket_ptr)
SocketInfoManager	epoll_socket.h	/^class SocketInfoManager$/;"	c
SocketInfoManager::SocketInfoManager	epoll_socket.h	/^    SocketInfoManager(int index, EpollSocket* epoll_socket_ptr) : m_fd_index(index), m_epoll_socket_ptr(epoll_socket_ptr)$/;"	f	class:SocketInfoManager	access:public	signature:(int index, EpollSocket* epoll_socket_ptr)
SocketInfoManager::close	epoll_socket.h	/^    void close()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::connTimeoutMs	epoll_socket.h	/^    int connTimeoutMs()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::dump	epoll_socket.h	/^    std::string dump()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::flushBuffer	epoll_socket.h	/^    void flushBuffer()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getAddr	epoll_socket.h	/^    int getAddr()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getBuffer	epoll_socket.h	/^    std::string& getBuffer()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getListenPort	epoll_socket.h	/^    int getListenPort()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getPort	epoll_socket.h	/^    int getPort()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getSocketFd	epoll_socket.h	/^    int getSocketFd()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getTaskSign	epoll_socket.h	/^    int getTaskSign()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::inUsed	epoll_socket.h	/^    bool inUsed()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::isListener	epoll_socket.h	/^    bool isListener()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::isOk	epoll_socket.h	/^    bool isOk()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::m_epoll_socket_ptr	epoll_socket.h	/^    EpollSocket* m_epoll_socket_ptr;$/;"	m	class:SocketInfoManager	access:private
SocketInfoManager::m_fd_index	epoll_socket.h	/^    int m_fd_index;$/;"	m	class:SocketInfoManager	access:private
SocketInfoManager::needRecvBytes	epoll_socket.h	/^    int needRecvBytes()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::operator !=	epoll_socket.h	/^    bool operator != (SocketInfoManager socket_info_manager)$/;"	f	class:SocketInfoManager	access:public	signature:(SocketInfoManager socket_info_manager)
SocketInfoManager::operator ++	epoll_socket.h	/^    SocketInfoManager& operator ++ ()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::setNeedRecvBytes	epoll_socket.h	/^    void setNeedRecvBytes(int need_bytes)$/;"	f	class:SocketInfoManager	access:public	signature:(int need_bytes)
SocketInfoManager::taskSign	epoll_socket.h	/^    int taskSign()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::timeout	epoll_socket.h	/^    bool timeout(uint32_t cur_time)$/;"	f	class:SocketInfoManager	access:public	signature:(uint32_t cur_time)
SocketType	epoll_socket.h	/^enum SocketType$/;"	g
Utility	common_utility.h	/^class Utility$/;"	c
Utility::getCurMilliSeconds	common_utility.h	/^    static int getCurMilliSeconds()$/;"	f	class:Utility	access:public	signature:()
_CALCULATE_SUM_MESSAGE_H_	calculate_sum_message.h	2;"	d
_CLIENT_CONNECTION_HANDLER_H_	client_connection_handler.h	2;"	d
_CLIENT_RECEIVER_HANDLER_H_	client_receiver_handler.h	2;"	d
_CLIENT_SEND_HANDLER_H_	client_send_handler.h	2;"	d
_COMMON_DEFINE_H_	common_define.h	2;"	d
_COMMON_QUEUE_H_	common_queue.h	2;"	d
_COMMON_THREAD_POOL_H_	common_thread_pool.h	2;"	d
_COMMON_UTILITY_H_	common_utility.h	2;"	d
_EPOLL_SOCKET_H_	epoll_socket.h	2;"	d
_EPOLL_SOCKET_MANAGER_H_	epoll_socket_manager.h	2;"	d
_MESSAGE_FACTORY_H_	message_factory.h	2;"	d
_MESSAGE_H_	message.h	2;"	d
_NETWORK_MANAGER_H_	network_manager.h	2;"	d
_SEND_SOCKET_H_	send_socket.h	2;"	d
_SERVER_MSG_HANDLER_H_	server_msg_handler.h	2;"	d
_SERVER_SEND_HANDLER_H_	server_send_handler.h	2;"	d
_SERVER_SEND_SOCKET_H_	server_send_socket.h	2;"	d
_message_header_t	common_define.h	/^typedef struct _message_header_t$/;"	s
_message_header_t::sequence	common_define.h	/^    int sequence;$/;"	m	struct:_message_header_t	access:public
_message_header_t::type	common_define.h	/^    int type;$/;"	m	struct:_message_header_t	access:public
_netaddres_info_t	epoll_socket.h	/^typedef struct _netaddres_info_t$/;"	s
_netaddres_info_t::m_backlog	epoll_socket.h	/^    int m_backlog;$/;"	m	struct:_netaddres_info_t	access:public
_netaddres_info_t::m_ip_addr	epoll_socket.h	/^    std::string m_ip_addr;$/;"	m	struct:_netaddres_info_t	access:public
_netaddres_info_t::m_port	epoll_socket.h	/^    int m_port;$/;"	m	struct:_netaddres_info_t	access:public
_sock_info_t	epoll_socket.h	/^typedef struct _sock_info_t$/;"	s
_sock_info_t::m_addr	epoll_socket.h	/^    int m_addr;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_closed	epoll_socket.h	/^    bool m_closed;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_conn_timeout_ms	epoll_socket.h	/^    int m_conn_timeout_ms;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_listen_port	epoll_socket.h	/^    int m_listen_port;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_need_recv_bytes	epoll_socket.h	/^    int m_need_recv_bytes;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_port	epoll_socket.h	/^    int m_port;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_recv_buf	epoll_socket.h	/^    std::string m_recv_buf;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_task_sign	epoll_socket.h	/^    int m_task_sign;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_time_ms	epoll_socket.h	/^    int m_time_ms;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_type	epoll_socket.h	/^    int m_type;$/;"	m	struct:_sock_info_t	access:public
acceptSocket	epoll_socket.h	/^    int acceptSocket(struct sockaddr_in* client_addr)$/;"	f	class:SocketAvaiManager	access:public	signature:(struct sockaddr_in* client_addr)
add	epoll_socket.cpp	/^bool EpollSocket::add(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int conn_timeout_ms, int sock_type)$/;"	f	class:EpollSocket	signature:(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int conn_timeout_ms, int sock_type)
add	epoll_socket.h	/^    bool add(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int conn_timeout_ms, int sock_type);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int conn_timeout_ms, int sock_type)
available	epoll_socket.h	/^    bool available()$/;"	f	class:SocketAvaiManager	access:public	signature:()
bindPort	epoll_socket.cpp	/^bool EpollSocket::bindPort()$/;"	f	class:EpollSocket	signature:()
bindPort	epoll_socket.h	/^    bool bindPort();$/;"	p	class:EpollSocket	access:public	signature:()
buildBody	calculate_sum_message.cpp	/^bool CalculateSumReqMessage::buildBody()$/;"	f	class:CalculateSumReqMessage	signature:()
buildBody	calculate_sum_message.cpp	/^bool CalculateSumRspMessage::buildBody()$/;"	f	class:CalculateSumRspMessage	signature:()
buildBody	calculate_sum_message.h	/^    virtual bool buildBody();$/;"	p	class:CalculateSumReqMessage	access:public	signature:()
buildBody	calculate_sum_message.h	/^    virtual bool buildBody();$/;"	p	class:CalculateSumRspMessage	access:public	signature:()
buildBody	message.h	/^    virtual bool buildBody() = 0;$/;"	p	class:Message	access:public	signature:()
buildMessage	message.cpp	/^bool Message::buildMessage(const Message* message)$/;"	f	class:Message	signature:(const Message* message)
buildMessage	message.h	/^    bool buildMessage(const Message* message = NULL);$/;"	p	class:Message	access:public	signature:(const Message* message = NULL)
calculateSum	server_msg_handler.cpp	/^int ServerMsgHandler::calculateSum(Message* message,Message*& rsp_message)$/;"	f	class:ServerMsgHandler	signature:(Message* message,Message*& rsp_message)
calculateSum	server_msg_handler.h	/^    int calculateSum(Message* message,Message*& rsp_message);$/;"	p	class:ServerMsgHandler	access:private	signature:(Message* message,Message*& rsp_message)
checkTimeout	client_connection_handler.cpp	/^void ClientConnectionHandler::checkTimeout()$/;"	f	class:ClientConnectionHandler	signature:()
checkTimeout	client_connection_handler.h	/^    void checkTimeout();$/;"	p	class:ClientConnectionHandler	access:private	signature:()
clientLongConnectPush	network_manager.cpp	/^bool NetworkManager::clientLongConnectPush(Message* message, int waitMs)$/;"	f	class:NetworkManager	signature:(Message* message, int waitMs)
clientLongConnectPush	network_manager.h	/^    static bool clientLongConnectPush(Message* message, int waitMs);$/;"	p	class:NetworkManager	access:public	signature:(Message* message, int waitMs)
close	epoll_socket.h	/^    void close()$/;"	f	class:SocketAvaiManager	access:public	signature:()
close	epoll_socket.h	/^    void close()$/;"	f	class:SocketInfoManager	access:public	signature:()
closeSocket	epoll_socket_manager.cpp	/^void EpollSocketManager::closeSocket(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
closeSocket	epoll_socket_manager.h	/^    void closeSocket(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
closeSocket	send_socket.cpp	/^	closeSocket()$/;"	f	class:SendSocket	signature:()
closeSocket	send_socket.h	/^    void closeSocket();$/;"	p	class:SendSocket	access:public	signature:()
connTimeoutMs	epoll_socket.h	/^    int connTimeoutMs()$/;"	f	class:SocketAvaiManager	access:public	signature:()
connTimeoutMs	epoll_socket.h	/^    int connTimeoutMs()$/;"	f	class:SocketInfoManager	access:public	signature:()
connectServer	server_send_socket.cpp	/^bool ServerSendSocket::connectServer(const uint32_t& conn_timeout_ms)$/;"	f	class:ServerSendSocket	signature:(const uint32_t& conn_timeout_ms)
connectServer	server_send_socket.h	/^    bool connectServer(const uint32_t& conn_timeout_ms);$/;"	p	class:ServerSendSocket	access:public	signature:(const uint32_t& conn_timeout_ms)
connectTo	send_socket.cpp	/^	connectTo()$/;"	f	class:SendSocket	signature:()
connectTo	send_socket.h	/^    bool connectTo();$/;"	p	class:SendSocket	access:public	signature:()
copyCommonParameter	message.h	/^    void copyCommonParameter(const Message* message);$/;"	p	class:Message	access:private	signature:(const Message* message)
count	epoll_socket.cpp	/^int EpollSocket::count()$/;"	f	class:EpollSocket	signature:()
count	epoll_socket.h	/^    int count();$/;"	p	class:EpollSocket	access:public	signature:()
count	epoll_socket_manager.cpp	/^int EpollSocketManager::count()$/;"	f	class:EpollSocketManager	signature:()
count	epoll_socket_manager.h	/^    int count();$/;"	p	class:EpollSocketManager	access:public	signature:()
createMessage	message_factory.cpp	/^Message* MessageFactory::createMessage(int message_type)$/;"	f	class:MessageFactory	signature:(int message_type)
createMessage	message_factory.h	/^    static Message* createMessage(int message_type);$/;"	p	class:MessageFactory	access:public	signature:(int message_type)
destroyThreadId	common_thread_pool.cpp	/^void CommonThreadPool::destroyThreadId()$/;"	f	class:CommonThreadPool	signature:()
destroyThreadId	common_thread_pool.h	/^    void destroyThreadId();$/;"	p	class:CommonThreadPool	access:public	signature:()
detachThreads	common_thread_pool.cpp	/^void CommonThreadPool::detachThreads()$/;"	f	class:CommonThreadPool	signature:()
detachThreads	common_thread_pool.h	/^    void detachThreads();$/;"	p	class:CommonThreadPool	access:public	signature:()
dump	epoll_socket.h	/^    std::string dump()$/;"	f	class:SocketInfoManager	access:public	signature:()
flushBuffer	epoll_socket.h	/^    void flushBuffer()$/;"	f	class:SocketInfoManager	access:public	signature:()
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
getAbsTimeout	common_queue.h	/^    void getAbsTimeout(int timeout_ms, struct timespec& timeout)$/;"	f	class:CommonQueue	access:private	signature:(int timeout_ms, struct timespec& timeout)
getAddr	epoll_socket.cpp	/^int EpollSocket::getAddr(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
getAddr	epoll_socket.h	/^    int getAddr()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getAddr	epoll_socket.h	/^    int getAddr()$/;"	f	class:SocketInfoManager	access:public	signature:()
getAddr	epoll_socket.h	/^    int getAddr(int sock_fd);$/;"	p	class:EpollSocket	access:protected	signature:(int sock_fd)
getBuffer	epoll_socket.h	/^    std::string& getBuffer()$/;"	f	class:SocketInfoManager	access:public	signature:()
getCapacity	common_queue.h	/^    int getCapacity()$/;"	f	class:CommonQueue	access:public	signature:()
getClientSendQueue	network_manager.cpp	/^MessageQueue* NetworkManager::getClientSendQueue(int num)$/;"	f	class:NetworkManager	signature:(int num)
getClientSendQueue	network_manager.h	/^    MessageQueue* getClientSendQueue(int num);$/;"	p	class:NetworkManager	access:public	signature:(int num)
getCurMilliSeconds	common_utility.h	/^    static int getCurMilliSeconds()$/;"	f	class:Utility	access:public	signature:()
getInstance	epoll_socket_manager.cpp	/^EpollSocketManager* EpollSocketManager::getInstance()$/;"	f	class:EpollSocketManager	signature:()
getInstance	epoll_socket_manager.h	/^    static EpollSocketManager* getInstance();$/;"	p	class:EpollSocketManager	access:public	signature:()
getInstance	network_manager.cpp	/^NetworkManager* NetworkManager::getInstance()$/;"	f	class:NetworkManager	signature:()
getInstance	network_manager.h	/^    static NetworkManager* getInstance();$/;"	p	class:NetworkManager	access:public	signature:()
getListenPort	epoll_socket.h	/^    int getListenPort()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getListenPort	epoll_socket.h	/^    int getListenPort()$/;"	f	class:SocketInfoManager	access:public	signature:()
getMaxSize	common_queue.h	/^    int getMaxSize()$/;"	f	class:CommonQueue	access:public	signature:()
getMessageQueue	network_manager.cpp	/^MessageQueue* NetworkManager::getMessageQueue()$/;"	f	class:NetworkManager	signature:()
getMessageQueue	network_manager.h	/^    MessageQueue* getMessageQueue();$/;"	p	class:NetworkManager	access:public	signature:()
getMessageType	message.cpp	/^int Message::getMessageType(const char* buffer,int buffer_size,int sign)$/;"	f	class:Message	signature:(const char* buffer,int buffer_size,int sign)
getMessageType	message.h	/^    static int getMessageType(const char* buffer,int buffer_size,int sign);$/;"	p	class:Message	access:public	signature:(const char* buffer,int buffer_size,int sign)
getPara1	calculate_sum_message.h	/^    double getPara1()$/;"	f	class:CalculateSumReqMessage	access:public	signature:()
getPara2	calculate_sum_message.h	/^    double getPara2()$/;"	f	class:CalculateSumReqMessage	access:public	signature:()
getPoolSize	common_thread_pool.h	/^    inline int getPoolSize()$/;"	f	class:CommonThreadPool	access:public	signature:()
getPort	epoll_socket.cpp	/^int EpollSocket::getPort(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
getPort	epoll_socket.h	/^    int getPort()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getPort	epoll_socket.h	/^    int getPort()$/;"	f	class:SocketInfoManager	access:public	signature:()
getPort	epoll_socket.h	/^    int getPort(int sock_fd);$/;"	p	class:EpollSocket	access:protected	signature:(int sock_fd)
getServerSendQueue	network_manager.h	/^    MessageQueue* getServerSendQueue();$/;"	p	class:NetworkManager	access:public	signature:()
getSize	common_queue.h	/^    int getSize()$/;"	f	class:CommonQueue	access:public	signature:()
getSocketCount	epoll_socket.cpp	/^int EpollSocket::getSocketCount()$/;"	f	class:EpollSocket	signature:()
getSocketCount	epoll_socket.h	/^    int getSocketCount();$/;"	p	class:EpollSocket	access:public	signature:()
getSocketFd	epoll_socket.h	/^    int getSocketFd()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getSocketFd	epoll_socket.h	/^    int getSocketFd()$/;"	f	class:SocketInfoManager	access:public	signature:()
getSocketInfo	epoll_socket_manager.cpp	/^SocketInfoManager EpollSocketManager::getSocketInfo(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
getSocketInfo	epoll_socket_manager.h	/^    SocketInfoManager getSocketInfo(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
getTaskSign	epoll_socket.h	/^    int getTaskSign()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getTaskSign	epoll_socket.h	/^    int getTaskSign()$/;"	f	class:SocketInfoManager	access:public	signature:()
getTime	epoll_socket.cpp	/^int EpollSocket::getTime(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
getTime	epoll_socket.h	/^    int getTime(int socket_fd);$/;"	p	class:EpollSocket	access:public	signature:(int socket_fd)
get_fd	send_socket.h	/^    int get_fd(){ return m_send_socket_fd; };$/;"	f	class:SendSocket	access:public	signature:()
get_ip	send_socket.cpp	/^	get_ip()$/;"	f	class:SendSocket	signature:()
get_ip	send_socket.h	/^    const char* get_ip();$/;"	p	class:SendSocket	access:public	signature:()
get_port	send_socket.cpp	/^	get_port()$/;"	f	class:SendSocket	signature:()
get_port	send_socket.h	/^    short get_port();$/;"	p	class:SendSocket	access:public	signature:()
get_sock_fd	send_socket.cpp	/^	get_sock_fd()$/;"	f	class:SendSocket	signature:()
get_sock_fd	send_socket.h	/^    int get_sock_fd();$/;"	p	class:SendSocket	access:public	signature:()
inUsed	epoll_socket.h	/^    bool inUsed()$/;"	f	class:SocketAvaiManager	access:public	signature:()
inUsed	epoll_socket.h	/^    bool inUsed()$/;"	f	class:SocketInfoManager	access:public	signature:()
init	common_queue.h	/^    bool init(int capacity)$/;"	f	class:CommonQueue	access:public	signature:(int capacity)
init	epoll_socket.cpp	/^void EpollSocket::init(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocket	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
init	epoll_socket.h	/^    void init(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocket	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
init	send_socket.cpp	/^	init(const char * ip, const short& port, const int& send_timeout_sec, const int& send_buf_size)$/;"	f	class:SendSocket	signature:(const char * ip, const short& port, const int& send_timeout_sec, const int& send_buf_size)
init	send_socket.h	/^    bool init(const char* ip, const short& port, const int& send_timeout_sec, const int& send_buf_size);$/;"	p	class:SendSocket	access:public	signature:(const char* ip, const short& port, const int& send_timeout_sec, const int& send_buf_size)
initClientLongConnectSend	network_manager.cpp	/^void NetworkManager::initClientLongConnectSend($/;"	f	class:NetworkManager	signature:( uint32_t client_long_connect_send_thread_count)
initClientLongConnectSend	network_manager.h	/^    void initClientLongConnectSend(uint32_t client_long_connect_send_thread_count);$/;"	p	class:NetworkManager	access:public	signature:(uint32_t client_long_connect_send_thread_count)
initClientRecv	network_manager.cpp	/^void NetworkManager::initClientRecv(int check_internal, int recv_thread_count)$/;"	f	class:NetworkManager	signature:(int check_internal, int recv_thread_count)
initClientRecv	network_manager.h	/^    void initClientRecv(int check_internal, int recv_thread_count);$/;"	p	class:NetworkManager	access:public	signature:(int check_internal, int recv_thread_count)
initQueues	client_connection_handler.cpp	/^void ClientConnectionHandler::initQueues(ClientSocketQueue* recv_sock_q)$/;"	f	class:ClientConnectionHandler	signature:(ClientSocketQueue* recv_sock_q)
initQueues	client_connection_handler.h	/^    void initQueues(ClientSocketQueue*);$/;"	p	class:ClientConnectionHandler	access:public	signature:(ClientSocketQueue*)
initQueues	client_receiver_handler.cpp	/^void ClientReceiverHandler::initQueues(ClientSocketQueue* socket_queue, MessageQueue* message_queue)$/;"	f	class:ClientReceiverHandler	signature:(ClientSocketQueue* socket_queue, MessageQueue* message_queue)
initQueues	client_receiver_handler.h	/^    void initQueues(ClientSocketQueue* socket_queue, MessageQueue* message_queue);$/;"	p	class:ClientReceiverHandler	access:public	signature:(ClientSocketQueue* socket_queue, MessageQueue* message_queue)
initQueues	client_send_handler.cpp	/^void ClientSendHandler::initQueues(MessageQueue* message_send_queue)$/;"	f	class:ClientSendHandler	signature:(MessageQueue* message_send_queue)
initQueues	client_send_handler.h	/^    void initQueues(MessageQueue* message_send_queue);$/;"	p	class:ClientSendHandler	access:public	signature:(MessageQueue* message_send_queue)
initQueues	server_send_handler.cpp	/^void ServerSendHandler::initQueues(MessageQueue* message_send_queue)$/;"	f	class:ServerSendHandler	signature:(MessageQueue* message_send_queue)
initQueues	server_send_handler.h	/^    void initQueues(MessageQueue* message_send_queue);$/;"	p	class:ServerSendHandler	access:public	signature:(MessageQueue* message_send_queue)
initServerLongConnectSend	network_manager.cpp	/^void NetworkManager::initServerLongConnectSend($/;"	f	class:NetworkManager	signature:( uint32_t server_long_connect_send_thread_count, const char * server_ip, short server_port, int send_timeout_sec, int send_buf_size)
initServerLongConnectSend	network_manager.h	/^    void initServerLongConnectSend($/;"	p	class:NetworkManager	access:public	signature:( uint32_t server_long_connect_send_thread_count, const char * server_ip, short server_port, int send_timeout_sec, int send_buf_size)
initSocket	epoll_socket_manager.cpp	/^bool EpollSocketManager::initSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocketManager	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
initSocket	epoll_socket_manager.h	/^    bool initSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocketManager	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
initSocket	network_manager.cpp	/^bool NetworkManager::initSocket(netaddres_info_t* netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:NetworkManager	signature:(netaddres_info_t* netaddr, const int& addr_num, const int& wait_time_ms)
initSocket	network_manager.h	/^    bool initSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:NetworkManager	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
initSocket	server_send_handler.cpp	/^void ServerSendHandler::initSocket(const char * ip, short port, int send_timeout_sec, int send_buf_size)$/;"	f	class:ServerSendHandler	signature:(const char * ip, short port, int send_timeout_sec, int send_buf_size)
initSocket	server_send_handler.h	/^    void initSocket(const char* ip, short port, int send_timeout_sec, int send_buf_size);$/;"	p	class:ServerSendHandler	access:public	signature:(const char* ip, short port, int send_timeout_sec, int send_buf_size)
initSocket	server_send_socket.cpp	/^void ServerSendSocket::initSocket(const char * ip,const short& port,const int& send_timeout_sec,const int& send_buf_size)$/;"	f	class:ServerSendSocket	signature:(const char * ip,const short& port,const int& send_timeout_sec,const int& send_buf_size)
initSocket	server_send_socket.h	/^    void initSocket(const char * ip, const short& port, const int& send_timeout_sec, const int& send_buf_size);$/;"	p	class:ServerSendSocket	access:public	signature:(const char * ip, const short& port, const int& send_timeout_sec, const int& send_buf_size)
isConnected	send_socket.cpp	/^	isConnected()$/;"	f	class:SendSocket	signature:()
isConnected	send_socket.h	/^    bool isConnected();$/;"	p	class:SendSocket	access:public	signature:()
isListener	epoll_socket.h	/^    bool isListener()$/;"	f	class:SocketAvaiManager	access:public	signature:()
isListener	epoll_socket.h	/^    bool isListener()$/;"	f	class:SocketInfoManager	access:public	signature:()
isOk	epoll_socket.h	/^    bool isOk()$/;"	f	class:SocketAvaiManager	access:public	signature:()
isOk	epoll_socket.h	/^    bool isOk()$/;"	f	class:SocketInfoManager	access:public	signature:()
isReconnect	send_socket.cpp	/^	isReconnect()$/;"	f	class:SendSocket	signature:()
isReconnect	send_socket.h	/^    bool isReconnect();$/;"	p	class:SendSocket	access:public	signature:()
isWritable	epoll_socket.h	/^    bool isWritable()$/;"	f	class:SocketAvaiManager	access:public	signature:()
listenPort	epoll_socket.cpp	/^bool EpollSocket::listenPort()$/;"	f	class:EpollSocket	signature:()
listenPort	epoll_socket.h	/^    bool listenPort();$/;"	p	class:EpollSocket	access:public	signature:()
m_addr	epoll_socket.h	/^    int m_addr;$/;"	m	struct:_sock_info_t	access:public
m_available_socket_num	epoll_socket.h	/^    int m_available_socket_num;$/;"	m	class:EpollSocket	access:private
m_backlog	epoll_socket.h	/^    int m_backlog;$/;"	m	struct:_netaddres_info_t	access:public
m_buffer	message.h	/^    string m_buffer;$/;"	m	class:Message	access:public
m_capacity	common_queue.h	/^    int m_capacity;$/;"	m	class:CommonQueue	access:private
m_check_internal	client_connection_handler.h	/^    int m_check_internal;$/;"	m	class:ClientConnectionHandler	access:private
m_client_connection_handler	network_manager.h	/^    ClientConnectionHandler* m_client_connection_handler;$/;"	m	class:NetworkManager	access:private
m_client_long_connect_message_send_queues	network_manager.h	/^    MessageQueue** m_client_long_connect_message_send_queues; $/;"	m	class:NetworkManager	access:private
m_client_long_connect_send_handlers	network_manager.h	/^    ClientSendHandler** m_client_long_connect_send_handlers;$/;"	m	class:NetworkManager	access:private
m_client_long_connect_send_thread_count	network_manager.h	/^    uint32_t m_client_long_connect_send_thread_count;$/;"	m	class:NetworkManager	access:private
m_client_port	message.h	/^    int m_client_port;$/;"	m	class:Message	access:public
m_client_receive_thread_count	network_manager.h	/^    int m_client_receive_thread_count;$/;"	m	class:NetworkManager	access:private
m_client_receiver_handler	network_manager.h	/^    ClientReceiverHandler* m_client_receiver_handler;$/;"	m	class:NetworkManager	access:private
m_closed	epoll_socket.h	/^    bool m_closed;$/;"	m	struct:_sock_info_t	access:public
m_cmd_handler	test.cpp	/^ServerMsgHandler* m_cmd_handler;$/;"	v
m_cond_not_empty	common_queue.h	/^    pthread_cond_t m_cond_not_empty;$/;"	m	class:CommonQueue	access:private
m_cond_not_full	common_queue.h	/^    pthread_cond_t m_cond_not_full;$/;"	m	class:CommonQueue	access:private
m_conn_timeout_ms	epoll_socket.h	/^    int m_conn_timeout_ms;$/;"	m	struct:_sock_info_t	access:public
m_cur_time	client_connection_handler.h	/^    int m_cur_time;$/;"	m	class:ClientConnectionHandler	access:private
m_epoll_fd	epoll_socket.h	/^    int m_epoll_fd;$/;"	m	class:EpollSocket	access:private
m_epoll_socket	epoll_socket_manager.h	/^    EpollSocket m_epoll_socket;$/;"	m	class:EpollSocketManager	access:private
m_epoll_socket_manager_instance	epoll_socket_manager.cpp	/^EpollSocketManager* EpollSocketManager::m_epoll_socket_manager_instance = new EpollSocketManager();$/;"	m	class:EpollSocketManager	file:
m_epoll_socket_manager_instance	epoll_socket_manager.h	/^    static EpollSocketManager* m_epoll_socket_manager_instance;$/;"	m	class:EpollSocketManager	access:private
m_epoll_socket_ptr	epoll_socket.h	/^    EpollSocket* m_epoll_socket_ptr;$/;"	m	class:SocketAvaiManager	access:private
m_epoll_socket_ptr	epoll_socket.h	/^    EpollSocket* m_epoll_socket_ptr;$/;"	m	class:SocketInfoManager	access:private
m_events	epoll_socket.h	/^    struct epoll_event m_events[EVENTS_SIZE];$/;"	m	class:EpollSocket	typeref:struct:EpollSocket::epoll_event	access:private
m_fd_index	epoll_socket.h	/^    int m_fd_index;$/;"	m	class:SocketAvaiManager	access:private
m_fd_index	epoll_socket.h	/^    int m_fd_index;$/;"	m	class:SocketInfoManager	access:private
m_instance	network_manager.cpp	/^NetworkManager* NetworkManager::m_instance = new NetworkManager();$/;"	m	class:NetworkManager	file:
m_instance	network_manager.h	/^    static NetworkManager* m_instance;$/;"	m	class:NetworkManager	access:private
m_ip	send_socket.h	/^    uint32_t m_ip;$/;"	m	class:SendSocket	access:public
m_ip	server_send_handler.h	/^    std::string m_ip;$/;"	m	class:ServerSendHandler	access:private
m_ip_addr	epoll_socket.h	/^    std::string m_ip_addr;$/;"	m	struct:_netaddres_info_t	access:public
m_ip_addr	message.h	/^    int m_ip_addr;$/;"	m	class:Message	access:public
m_ip_string	send_socket.h	/^    char m_ip_string[16];$/;"	m	class:SendSocket	access:public
m_last_check_point	client_connection_handler.h	/^    int m_last_check_point;$/;"	m	class:ClientConnectionHandler	access:private
m_listen_num	epoll_socket.h	/^    int m_listen_num;$/;"	m	class:EpollSocket	access:private
m_listen_port	epoll_socket.h	/^    int m_listen_port;$/;"	m	struct:_sock_info_t	access:public
m_listen_port	message.h	/^    int m_listen_port;$/;"	m	class:Message	access:public
m_max_size	common_queue.h	/^    int m_max_size;$/;"	m	class:CommonQueue	access:private
m_message_header	message.h	/^    message_header_t m_message_header;$/;"	m	class:Message	access:public
m_message_queue	client_receiver_handler.h	/^    MessageQueue* m_message_queue;$/;"	m	class:ClientReceiverHandler	access:private
m_message_queue	network_manager.h	/^    MessageQueue* m_message_queue;$/;"	m	class:NetworkManager	access:private
m_message_send_queue	client_send_handler.h	/^    MessageQueue* m_message_send_queue;$/;"	m	class:ClientSendHandler	access:private
m_message_send_queue	server_send_handler.h	/^    MessageQueue* m_message_send_queue;$/;"	m	class:ServerSendHandler	access:private
m_msg_body_str	message.h	/^    string m_msg_body_str;$/;"	m	class:Message	access:public
m_mutex	common_queue.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:CommonQueue	access:private
m_mutex	epoll_socket.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:EpollSocket	access:private
m_need_recv_bytes	epoll_socket.h	/^    int m_need_recv_bytes;$/;"	m	struct:_sock_info_t	access:public
m_net_addr	epoll_socket.h	/^    netaddres_info_t *m_net_addr;$/;"	m	class:EpollSocket	access:private
m_pool_size	common_thread_pool.h	/^    int m_pool_size;$/;"	m	class:CommonThreadPool	access:private
m_port	epoll_socket.h	/^    int m_port;$/;"	m	struct:_netaddres_info_t	access:public
m_port	epoll_socket.h	/^    int m_port;$/;"	m	struct:_sock_info_t	access:public
m_port	send_socket.h	/^    short m_port;$/;"	m	class:SendSocket	access:public
m_port	server_send_handler.h	/^	short m_port;$/;"	m	class:ServerSendHandler	access:private
m_push_queue_fail	client_receiver_handler.h	/^    int m_push_queue_fail;$/;"	m	class:ClientReceiverHandler	access:private
m_push_queue_succ	client_receiver_handler.h	/^    int m_push_queue_succ;$/;"	m	class:ClientReceiverHandler	access:private
m_queue	common_queue.h	/^    std::queue<T> m_queue;$/;"	m	class:CommonQueue	access:private
m_queue_size	network_manager.h	/^    int m_queue_size;$/;"	m	class:NetworkManager	access:private
m_reconnect	send_socket.h	/^    short m_reconnect;$/;"	m	class:SendSocket	access:public
m_recv_buf	epoll_socket.h	/^    std::string m_recv_buf;$/;"	m	struct:_sock_info_t	access:public
m_recv_message_num	client_receiver_handler.h	/^    int m_recv_message_num;$/;"	m	class:ClientReceiverHandler	access:private
m_recv_sock_q	client_connection_handler.h	/^    ClientSocketQueue* m_recv_sock_q;$/;"	m	class:ClientConnectionHandler	access:private
m_result	calculate_sum_message.h	/^    double m_result;$/;"	m	class:CalculateSumRspMessage	access:private
m_revc_message	client_send_handler.h	/^    uint32_t m_revc_message;$/;"	m	class:ClientSendHandler	access:private
m_send_buf_size	send_socket.h	/^    int m_send_buf_size;$/;"	m	class:SendSocket	access:public
m_send_buf_size	server_send_handler.h	/^	int m_send_buf_size;$/;"	m	class:ServerSendHandler	access:private
m_send_fail	client_send_handler.h	/^    uint32_t m_send_fail;$/;"	m	class:ClientSendHandler	access:private
m_send_socket	server_send_socket.h	/^    SendSocket m_send_socket;$/;"	m	class:ServerSendSocket	access:private
m_send_socket_fd	send_socket.h	/^    int m_send_socket_fd;$/;"	m	class:SendSocket	access:public
m_send_succ	client_send_handler.h	/^    uint32_t m_send_succ;$/;"	m	class:ClientSendHandler	access:private
m_send_timeout_sec	send_socket.h	/^    int m_send_timeout_sec;$/;"	m	class:SendSocket	access:public
m_send_timeout_sec	server_send_handler.h	/^	int m_send_timeout_sec;$/;"	m	class:ServerSendHandler	access:private
m_server_long_connect_message_send_queue	network_manager.h	/^    MessageQueue* m_server_long_connect_message_send_queue;$/;"	m	class:NetworkManager	access:private
m_server_long_connect_send_handler	network_manager.h	/^    ServerSendHandler* m_server_long_connect_send_handler;$/;"	m	class:NetworkManager	access:private
m_server_long_connect_send_thread_count	network_manager.h	/^    uint32_t m_server_long_connect_send_thread_count;$/;"	m	class:NetworkManager	access:private
m_sock_queue	network_manager.h	/^    ClientSocketQueue* m_sock_queue;$/;"	m	class:NetworkManager	access:private
m_socket	epoll_socket.h	/^    int *m_socket;$/;"	m	class:EpollSocket	access:private
m_socket_fd	epoll_socket.h	/^    int m_socket_fd;$/;"	m	class:SocketAvaiManager	access:private
m_socket_fd	message.h	/^    int m_socket_fd;$/;"	m	class:Message	access:public
m_socket_info	epoll_socket.h	/^    sock_info_t m_socket_info[EPOLL_SIZE];$/;"	m	class:EpollSocket	access:private
m_socket_num	epoll_socket.h	/^    int m_socket_num;$/;"	m	class:EpollSocket	access:private
m_socket_queue	client_receiver_handler.h	/^    ClientSocketQueue* m_socket_queue;$/;"	m	class:ClientReceiverHandler	access:private
m_task_sign	epoll_socket.h	/^    int m_task_sign;$/;"	m	struct:_sock_info_t	access:public
m_task_sign	message.h	/^    int m_task_sign;$/;"	m	class:Message	access:public
m_thread_ids	common_thread_pool.h	/^    pthread_t *m_thread_ids;$/;"	m	class:CommonThreadPool	access:private
m_time_ms	epoll_socket.h	/^    int m_time_ms;$/;"	m	struct:_sock_info_t	access:public
m_type	epoll_socket.h	/^    int m_type;$/;"	m	struct:_sock_info_t	access:public
m_wait_time_ms	epoll_socket.h	/^    int m_wait_time_ms;$/;"	m	class:EpollSocket	access:private
main	test.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
messagePop	network_manager.cpp	/^bool NetworkManager::messagePop(Message*& message, int waitMs)$/;"	f	class:NetworkManager	signature:(Message*& message, int waitMs)
messagePop	network_manager.h	/^    static bool messagePop(Message*& message, int waitMs);$/;"	p	class:NetworkManager	access:public	signature:(Message*& message, int waitMs)
messageSequence	message.cpp	/^int Message::messageSequence()$/;"	f	class:Message	signature:()
messageSequence	message.h	/^    int messageSequence();$/;"	p	class:Message	access:public	signature:()
messageType	message.cpp	/^int Message::messageType()$/;"	f	class:Message	signature:()
messageType	message.h	/^    int messageType();$/;"	p	class:Message	access:public	signature:()
message_header_t	common_define.h	/^}message_header_t;$/;"	t	typeref:struct:_message_header_t
needRecvBytes	epoll_socket.h	/^    int needRecvBytes()$/;"	f	class:SocketInfoManager	access:public	signature:()
netaddres_info_t	epoll_socket.h	/^}netaddres_info_t;$/;"	t	typeref:struct:_netaddres_info_t
operator !=	epoll_socket.h	/^    bool operator != (SocketAvaiManager socket_avai_manager)$/;"	f	class:SocketAvaiManager	access:public	signature:(SocketAvaiManager socket_avai_manager)
operator !=	epoll_socket.h	/^    bool operator != (SocketInfoManager socket_info_manager)$/;"	f	class:SocketInfoManager	access:public	signature:(SocketInfoManager socket_info_manager)
operator ++	epoll_socket.h	/^    SocketAvaiManager& operator ++ ()$/;"	f	class:SocketAvaiManager	access:public	signature:()
operator ++	epoll_socket.h	/^    SocketInfoManager& operator ++ ()$/;"	f	class:SocketInfoManager	access:public	signature:()
pB	client	/^ELF/;"	v
para1	calculate_sum_message.h	/^    double para1;$/;"	m	class:CalculateSumReqMessage	access:private
para2	calculate_sum_message.h	/^    double para2;$/;"	m	class:CalculateSumReqMessage	access:private
parseBody	calculate_sum_message.cpp	/^bool CalculateSumReqMessage::parseBody()$/;"	f	class:CalculateSumReqMessage	signature:()
parseBody	calculate_sum_message.cpp	/^bool CalculateSumRspMessage::parseBody()$/;"	f	class:CalculateSumRspMessage	signature:()
parseBody	calculate_sum_message.h	/^    virtual bool parseBody();$/;"	p	class:CalculateSumReqMessage	access:public	signature:()
parseBody	calculate_sum_message.h	/^    virtual bool parseBody();$/;"	p	class:CalculateSumRspMessage	access:public	signature:()
parseBody	message.h	/^    virtual bool parseBody() = 0;$/;"	p	class:Message	access:public	signature:()
parseHeader	message.cpp	/^bool Message::parseHeader()$/;"	f	class:Message	signature:()
parseHeader	message.h	/^    bool parseHeader();$/;"	p	class:Message	access:public	signature:()
parseMessage	message.cpp	/^bool Message::parseMessage()$/;"	f	class:Message	signature:()
parseMessage	message.h	/^    bool parseMessage();$/;"	p	class:Message	access:public	signature:()
pop	common_queue.h	/^    bool pop(T& retVal)$/;"	f	class:CommonQueue	access:public	signature:(T& retVal)
pop	common_queue.h	/^    bool pop(T& retVal, int wait_ms)$/;"	f	class:CommonQueue	access:public	signature:(T& retVal, int wait_ms)
processConnection	client_connection_handler.cpp	/^void ClientConnectionHandler::processConnection(int new_fd, int listen_port, int ip_addr, int client_port, int conn_timeout_ms)$/;"	f	class:ClientConnectionHandler	signature:(int new_fd, int listen_port, int ip_addr, int client_port, int conn_timeout_ms)
processConnection	client_connection_handler.h	/^    void processConnection($/;"	p	class:ClientConnectionHandler	access:private	signature:( int new_fd, int listen_port, int ip_addr, int client_port, int conn_timeout_ms)
push	common_queue.h	/^    bool push(const T& element)$/;"	f	class:CommonQueue	access:public	signature:(const T& element)
push	common_queue.h	/^    bool push(const T& element, int wait_ms)$/;"	f	class:CommonQueue	access:public	signature:(const T& element, int wait_ms)
putIntoEpoll	epoll_socket_manager.cpp	/^bool EpollSocketManager::putIntoEpoll(int fd, int cur_time,  int listen_port, int client_port, int ip_addr, int conn_timeout_ms, int sock_type)$/;"	f	class:EpollSocketManager	signature:(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int conn_timeout_ms, int sock_type)
putIntoEpoll	epoll_socket_manager.h	/^    bool putIntoEpoll(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int conn_timeout_ms, int sock_type = SOCKET_TYPE_CLIENT);$/;"	p	class:EpollSocketManager	access:public	signature:(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int conn_timeout_ms, int sock_type = SOCKET_TYPE_CLIENT)
reconnectTo	send_socket.cpp	/^	reconnectTo()$/;"	f	class:SendSocket	signature:()
reconnectTo	send_socket.h	/^    bool reconnectTo();$/;"	p	class:SendSocket	access:public	signature:()
recvCmd	client_receiver_handler.cpp	/^int ClientReceiverHandler::recvCmd(SocketInfoManager& socket_info)$/;"	f	class:ClientReceiverHandler	signature:(SocketInfoManager& socket_info)
recvCmd	client_receiver_handler.h	/^    int recvCmd(SocketInfoManager& socket_info);$/;"	p	class:ClientReceiverHandler	access:public	signature:(SocketInfoManager& socket_info)
recvData	client_receiver_handler.cpp	/^int ClientReceiverHandler::recvData(int sock_fd, char *recv_buffer, const int need_recv_bytes, int& real_recv_len)$/;"	f	class:ClientReceiverHandler	signature:(int sock_fd, char *recv_buffer, const int need_recv_bytes, int& real_recv_len)
recvData	client_receiver_handler.h	/^    int recvData($/;"	p	class:ClientReceiverHandler	access:public	signature:( int sock_fd, char *recv_buffer, const int need_recv_bytes, int& real_recv_len)
recvData	send_socket.cpp	/^	recvData(int fd_sock, char* buffer, int recv_len,int& state)$/;"	f	class:SendSocket	signature:(int fd_sock, char* buffer, int recv_len,int& state)
recvData	send_socket.h	/^    static int recvData(int fd_sock, char* buffer, int recv_len, int& state);$/;"	p	class:SendSocket	access:public	signature:(int fd_sock, char* buffer, int recv_len, int& state)
removeSocket	epoll_socket.cpp	/^bool EpollSocket::removeSocket(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
removeSocket	epoll_socket.h	/^    bool removeSocket(int sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd)
removeSocket	epoll_socket_manager.cpp	/^bool EpollSocketManager::removeSocket(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
removeSocket	epoll_socket_manager.h	/^    bool removeSocket(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
sendData	client_send_handler.cpp	/^bool ClientSendHandler::sendData(int socket_fd,const char* data, int data_len)$/;"	f	class:ClientSendHandler	signature:(int socket_fd,const char* data, int data_len)
sendData	client_send_handler.h	/^    bool sendData(int socket_fd,const char* data, int data_len);$/;"	p	class:ClientSendHandler	access:public	signature:(int socket_fd,const char* data, int data_len)
sendData	send_socket.cpp	/^	sendData(const char* data, int data_len)$/;"	f	class:SendSocket	signature:(const char* data, int data_len)
sendData	send_socket.h	/^    bool sendData(const char* data, int data_len);$/;"	p	class:SendSocket	access:public	signature:(const char* data, int data_len)
sendData	server_send_socket.cpp	/^bool ServerSendSocket::sendData(const Message* message,const int& timeout_ms)$/;"	f	class:ServerSendSocket	signature:(const Message* message,const int& timeout_ms)
sendData	server_send_socket.h	/^    bool sendData(const Message* message,const int& timeout_ms = 100);$/;"	p	class:ServerSendSocket	access:public	signature:(const Message* message,const int& timeout_ms = 100)
sendDataRetry	send_socket.cpp	/^	sendDataRetry(const char * data, unsigned int data_len)$/;"	f	class:SendSocket	signature:(const char * data, unsigned int data_len)
sendDataRetry	send_socket.h	/^    bool sendDataRetry(const char* data, unsigned int data_len);$/;"	p	class:SendSocket	access:public	signature:(const char* data, unsigned int data_len)
sequence	common_define.h	/^    int sequence;$/;"	m	struct:_message_header_t	access:public
setBlock	send_socket.cpp	/^	setBlock()$/;"	f	class:SendSocket	signature:()
setBlock	send_socket.h	/^    bool setBlock();$/;"	p	class:SendSocket	access:public	signature:()
setHeaderControl	calculate_sum_message.h	/^    virtual void setHeaderControl()$/;"	f	class:CalculateSumReqMessage	access:public	signature:()
setHeaderControl	calculate_sum_message.h	/^    virtual void setHeaderControl()$/;"	f	class:CalculateSumRspMessage	access:public	signature:()
setHeaderControl	message.h	/^    virtual void setHeaderControl() = 0;$/;"	p	class:Message	access:public	signature:()
setLinger	send_socket.cpp	/^	setLinger(int onoff, int linger)$/;"	f	class:SendSocket	signature:(int onoff, int linger)
setLinger	send_socket.h	/^    bool setLinger(int onoff, int linger);$/;"	p	class:SendSocket	access:public	signature:(int onoff, int linger)
setNeedRecvBytes	epoll_socket.h	/^    void setNeedRecvBytes(int need_bytes)$/;"	f	class:SocketInfoManager	access:public	signature:(int need_bytes)
setNonblock	epoll_socket.cpp	/^bool EpollSocket::setNonblock(int& sock_fd)$/;"	f	class:EpollSocket	signature:(int& sock_fd)
setNonblock	epoll_socket.h	/^    bool setNonblock(int& sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int& sock_fd)
setNonblock	send_socket.cpp	/^	setNonblock()$/;"	f	class:SendSocket	signature:()
setNonblock	send_socket.h	/^    bool setNonblock();$/;"	p	class:SendSocket	access:public	signature:()
setQueueSize	log/test.INFO	/^I0530 13:08:34.621222 18261 network_manager.cpp:34] NetworkManager::setQueueSize(), queue_size[100]$/;"	p	class:NetworkManager	file:	signature:()
setQueueSize	log/test.ubuntu.handy.log.INFO.20140530-012643.16182	/^I0530 01:26:43.342330 16182 network_manager.cpp:34] NetworkManager::setQueueSize(), queue_size[100]$/;"	p	class:NetworkManager	file:	signature:()
setQueueSize	log/test.ubuntu.handy.log.INFO.20140530-023034.16407	/^I0530 02:30:34.994678 16407 network_manager.cpp:34] NetworkManager::setQueueSize(), queue_size[100]$/;"	p	class:NetworkManager	file:	signature:()
setQueueSize	log/test.ubuntu.handy.log.INFO.20140530-130834.18261	/^I0530 13:08:34.621222 18261 network_manager.cpp:34] NetworkManager::setQueueSize(), queue_size[100]$/;"	p	class:NetworkManager	file:	signature:()
setQueueSize	network_manager.cpp	/^void NetworkManager::setQueueSize(int queue_size)$/;"	f	class:NetworkManager	signature:(int queue_size)
setQueueSize	network_manager.h	/^    void setQueueSize(int queue_size);$/;"	p	class:NetworkManager	access:public	signature:(int queue_size)
setRecvBuf	send_socket.cpp	/^bool SendSocket::setRecvBuf(uint32_t buf_size)$/;"	f	class:SendSocket	signature:(uint32_t buf_size)
setRecvBuf	send_socket.h	/^    bool setRecvBuf(uint32_t buf_size);$/;"	p	class:SendSocket	access:public	signature:(uint32_t buf_size)
setRecvTimeout	send_socket.cpp	/^	setRecvTimeout(int timeout_sec)$/;"	f	class:SendSocket	signature:(int timeout_sec)
setRecvTimeout	send_socket.h	/^    bool setRecvTimeout(int timeout_sec);$/;"	p	class:SendSocket	access:public	signature:(int timeout_sec)
setResult	calculate_sum_message.h	/^    void setResult(double para1, double para2)$/;"	f	class:CalculateSumRspMessage	access:public	signature:(double para1, double para2)
setSendBuf	send_socket.cpp	/^bool SendSocket::setSendBuf(uint32_t buf_size)$/;"	f	class:SendSocket	signature:(uint32_t buf_size)
setSendBuf	send_socket.h	/^    bool setSendBuf(uint32_t buf_size);$/;"	p	class:SendSocket	access:public	signature:(uint32_t buf_size)
setSendTimeout	send_socket.cpp	/^	setSendTimeout(int timeout_sec)$/;"	f	class:SendSocket	signature:(int timeout_sec)
setSendTimeout	send_socket.h	/^    bool setSendTimeout(int timeout_sec);$/;"	p	class:SendSocket	access:public	signature:(int timeout_sec)
sock_info_t	epoll_socket.h	/^}sock_info_t;$/;"	t	typeref:struct:_sock_info_t
socketAvaiBegin	epoll_socket.cpp	/^SocketAvaiManager EpollSocket::socketAvaiBegin()$/;"	f	class:EpollSocket	signature:()
socketAvaiBegin	epoll_socket.h	/^    SocketAvaiManager socketAvaiBegin();$/;"	p	class:EpollSocket	access:public	signature:()
socketAvaiBegin	epoll_socket_manager.cpp	/^SocketAvaiManager EpollSocketManager::socketAvaiBegin()$/;"	f	class:EpollSocketManager	signature:()
socketAvaiBegin	epoll_socket_manager.h	/^    SocketAvaiManager socketAvaiBegin();$/;"	p	class:EpollSocketManager	access:public	signature:()
socketAvaiEnd	epoll_socket.cpp	/^SocketAvaiManager EpollSocket::socketAvaiEnd()$/;"	f	class:EpollSocket	signature:()
socketAvaiEnd	epoll_socket.h	/^    SocketAvaiManager socketAvaiEnd();$/;"	p	class:EpollSocket	access:public	signature:()
socketAvaiEnd	epoll_socket_manager.cpp	/^SocketAvaiManager EpollSocketManager::socketAvaiEnd()$/;"	f	class:EpollSocketManager	signature:()
socketAvaiEnd	epoll_socket_manager.h	/^    SocketAvaiManager socketAvaiEnd();$/;"	p	class:EpollSocketManager	access:public	signature:()
socketInfo	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfo(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
socketInfo	epoll_socket.h	/^    SocketInfoManager socketInfo(int sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd)
socketInfoBegin	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfoBegin()$/;"	f	class:EpollSocket	signature:()
socketInfoBegin	epoll_socket.h	/^    SocketInfoManager socketInfoBegin();$/;"	p	class:EpollSocket	access:public	signature:()
socketInfoBegin	epoll_socket_manager.cpp	/^SocketInfoManager EpollSocketManager::socketInfoBegin()$/;"	f	class:EpollSocketManager	signature:()
socketInfoBegin	epoll_socket_manager.h	/^    SocketInfoManager socketInfoBegin();$/;"	p	class:EpollSocketManager	access:public	signature:()
socketInfoEnd	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfoEnd()$/;"	f	class:EpollSocket	signature:()
socketInfoEnd	epoll_socket.h	/^    SocketInfoManager socketInfoEnd();$/;"	p	class:EpollSocket	access:public	signature:()
socketInfoEnd	epoll_socket_manager.cpp	/^SocketInfoManager EpollSocketManager::socketInfoEnd()$/;"	f	class:EpollSocketManager	signature:()
socketInfoEnd	epoll_socket_manager.h	/^    SocketInfoManager socketInfoEnd();$/;"	p	class:EpollSocketManager	access:public	signature:()
ssendData	send_socket.cpp	/^bool SendSocket::ssendData(int socket_fd,const char * send_buf, const int& send_bytes, const int& timeout_ms)$/;"	f	class:SendSocket	signature:(int socket_fd,const char * send_buf, const int& send_bytes, const int& timeout_ms)
ssendData	send_socket.h	/^    static bool ssendData(int socket_fd,const char * send_buf, const int& send_bytes, const int& timeout_ms = 100);$/;"	p	class:SendSocket	access:public	signature:(int socket_fd,const char * send_buf, const int& send_bytes, const int& timeout_ms = 100)
start	network_manager.cpp	/^bool NetworkManager::start()$/;"	f	class:NetworkManager	signature:()
start	network_manager.h	/^    bool start();$/;"	p	class:NetworkManager	access:public	signature:()
startThreads	common_thread_pool.cpp	/^bool CommonThreadPool::startThreads()$/;"	f	class:CommonThreadPool	signature:()
startThreads	common_thread_pool.h	/^    bool startThreads();$/;"	p	class:CommonThreadPool	access:public	signature:()
taskSign	epoll_socket.h	/^    int taskSign()$/;"	f	class:SocketInfoManager	access:public	signature:()
threadProc	common_thread_pool.cpp	/^void *CommonThreadPool::threadProc(void *para)$/;"	f	class:CommonThreadPool	signature:(void *para)
threadProc	common_thread_pool.h	/^    static void* threadProc(void* para);$/;"	p	class:CommonThreadPool	access:private	signature:(void* para)
timeout	epoll_socket.h	/^    bool timeout(uint32_t cur_time)$/;"	f	class:SocketInfoManager	access:public	signature:(uint32_t cur_time)
timeout	epoll_socket_manager.cpp	/^bool EpollSocketManager::timeout(int cur_time_ms)$/;"	f	class:EpollSocketManager	signature:(int cur_time_ms)
timeout	epoll_socket_manager.h	/^    bool timeout(int cur_time_ms);$/;"	p	class:EpollSocketManager	access:public	signature:(int cur_time_ms)
type	common_define.h	/^    int type;$/;"	m	struct:_message_header_t	access:public
version	message.cpp	/^int Message::version()$/;"	f	class:Message	signature:()
version	message.h	/^    int version();$/;"	p	class:Message	access:public	signature:()
waitAvailableSocket	epoll_socket.cpp	/^int EpollSocket::waitAvailableSocket()$/;"	f	class:EpollSocket	signature:()
waitAvailableSocket	epoll_socket.h	/^    int waitAvailableSocket();$/;"	p	class:EpollSocket	access:public	signature:()
waitAvailableSocket	epoll_socket_manager.cpp	/^int EpollSocketManager::waitAvailableSocket()$/;"	f	class:EpollSocketManager	signature:()
waitAvailableSocket	epoll_socket_manager.h	/^    int waitAvailableSocket();$/;"	p	class:EpollSocketManager	access:public	signature:()
waitThreadsTermination	common_thread_pool.cpp	/^void CommonThreadPool::waitThreadsTermination()$/;"	f	class:CommonThreadPool	signature:()
waitThreadsTermination	common_thread_pool.h	/^    void waitThreadsTermination();$/;"	p	class:CommonThreadPool	access:public	signature:()
waitThreadsTermination	network_manager.cpp	/^void NetworkManager::waitThreadsTermination()$/;"	f	class:NetworkManager	signature:()
waitThreadsTermination	network_manager.h	/^    void waitThreadsTermination();$/;"	p	class:NetworkManager	access:public	signature:()
work	client_connection_handler.cpp	/^void ClientConnectionHandler::work()$/;"	f	class:ClientConnectionHandler	signature:()
work	client_connection_handler.h	/^    virtual void work();$/;"	p	class:ClientConnectionHandler	access:protected	signature:()
work	client_receiver_handler.cpp	/^void ClientReceiverHandler::work()$/;"	f	class:ClientReceiverHandler	signature:()
work	client_receiver_handler.h	/^    virtual void work();$/;"	p	class:ClientReceiverHandler	access:protected	signature:()
work	client_send_handler.cpp	/^void ClientSendHandler::work()$/;"	f	class:ClientSendHandler	signature:()
work	client_send_handler.h	/^    virtual void work();$/;"	p	class:ClientSendHandler	access:protected	signature:()
work	common_thread_pool.h	/^    virtual void work() = 0;$/;"	p	class:CommonThreadPool	access:protected	signature:()
work	server_msg_handler.cpp	/^void ServerMsgHandler::work()$/;"	f	class:ServerMsgHandler	signature:()
work	server_msg_handler.h	/^    virtual void work();$/;"	p	class:ServerMsgHandler	access:protected	signature:()
work	server_send_handler.cpp	/^void ServerSendHandler::work()$/;"	f	class:ServerSendHandler	signature:()
work	server_send_handler.h	/^    virtual void work();$/;"	p	class:ServerSendHandler	access:protected	signature:()
~CalculateSumReqMessage	calculate_sum_message.cpp	/^CalculateSumReqMessage::~CalculateSumReqMessage()$/;"	f	class:CalculateSumReqMessage	signature:()
~CalculateSumReqMessage	calculate_sum_message.h	/^    ~CalculateSumReqMessage();$/;"	p	class:CalculateSumReqMessage	access:public	signature:()
~CalculateSumRspMessage	calculate_sum_message.cpp	/^CalculateSumRspMessage::~CalculateSumRspMessage()$/;"	f	class:CalculateSumRspMessage	signature:()
~CalculateSumRspMessage	calculate_sum_message.h	/^    ~CalculateSumRspMessage();$/;"	p	class:CalculateSumRspMessage	access:public	signature:()
~ClientConnectionHandler	client_connection_handler.cpp	/^ClientConnectionHandler::~ClientConnectionHandler()$/;"	f	class:ClientConnectionHandler	signature:()
~ClientConnectionHandler	client_connection_handler.h	/^    virtual ~ClientConnectionHandler();$/;"	p	class:ClientConnectionHandler	access:public	signature:()
~ClientReceiverHandler	client_receiver_handler.cpp	/^ClientReceiverHandler::~ClientReceiverHandler()$/;"	f	class:ClientReceiverHandler	signature:()
~ClientReceiverHandler	client_receiver_handler.h	/^    virtual ~ClientReceiverHandler();$/;"	p	class:ClientReceiverHandler	access:public	signature:()
~ClientSendHandler	client_send_handler.cpp	/^ClientSendHandler::~ClientSendHandler()$/;"	f	class:ClientSendHandler	signature:()
~ClientSendHandler	client_send_handler.h	/^    virtual ~ClientSendHandler();$/;"	p	class:ClientSendHandler	access:public	signature:()
~CommonQueue	common_queue.h	/^    virtual ~CommonQueue()$/;"	f	class:CommonQueue	access:public	signature:()
~CommonThreadPool	common_thread_pool.h	/^    virtual ~CommonThreadPool()$/;"	f	class:CommonThreadPool	access:public	signature:()
~EpollSocket	epoll_socket.cpp	/^EpollSocket::~EpollSocket()$/;"	f	class:EpollSocket	signature:()
~EpollSocket	epoll_socket.h	/^    ~EpollSocket();$/;"	p	class:EpollSocket	access:public	signature:()
~EpollSocketManager	epoll_socket_manager.cpp	/^EpollSocketManager::~EpollSocketManager()$/;"	f	class:EpollSocketManager	signature:()
~EpollSocketManager	epoll_socket_manager.h	/^    ~EpollSocketManager();$/;"	p	class:EpollSocketManager	access:public	signature:()
~Message	message.cpp	/^Message::~Message()$/;"	f	class:Message	signature:()
~Message	message.h	/^    virtual ~Message();$/;"	p	class:Message	access:public	signature:()
~MessageFactory	message_factory.cpp	/^MessageFactory::~MessageFactory()$/;"	f	class:MessageFactory	signature:()
~MessageFactory	message_factory.h	/^    ~MessageFactory();$/;"	p	class:MessageFactory	access:public	signature:()
~NetworkManager	network_manager.cpp	/^NetworkManager::~NetworkManager()$/;"	f	class:NetworkManager	signature:()
~NetworkManager	network_manager.h	/^    ~NetworkManager();$/;"	p	class:NetworkManager	access:public	signature:()
~SendSocket	send_socket.cpp	/^	~SendSocket()$/;"	f	class:SendSocket	signature:()
~SendSocket	send_socket.h	/^    ~SendSocket();$/;"	p	class:SendSocket	access:public	signature:()
~ServerMsgHandler	server_msg_handler.cpp	/^ServerMsgHandler::~ServerMsgHandler()$/;"	f	class:ServerMsgHandler	signature:()
~ServerMsgHandler	server_msg_handler.h	/^    virtual ~ServerMsgHandler();$/;"	p	class:ServerMsgHandler	access:public	signature:()
~ServerSendHandler	server_send_handler.cpp	/^ServerSendHandler::~ServerSendHandler()$/;"	f	class:ServerSendHandler	signature:()
~ServerSendHandler	server_send_handler.h	/^    ~ServerSendHandler();$/;"	p	class:ServerSendHandler	access:public	signature:()
~ServerSendSocket	server_send_socket.cpp	/^ServerSendSocket::~ServerSendSocket()$/;"	f	class:ServerSendSocket	signature:()
~ServerSendSocket	server_send_socket.h	/^    ~ServerSendSocket();$/;"	p	class:ServerSendSocket	access:public	signature:()
