!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
EPOLL_SIZE	epoll_socket.h	/^    static const int EPOLL_SIZE = 6000;$/;"	m	class:EpollSocket	access:private
EVENTS_SIZE	epoll_socket.h	/^    static const int EVENTS_SIZE = EPOLL_SIZE;$/;"	m	class:EpollSocket	access:private
EpollSocket	epoll_socket.cpp	/^EpollSocket::EpollSocket()$/;"	f	class:EpollSocket	signature:()
EpollSocket	epoll_socket.cpp	/^EpollSocket::EpollSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocket	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket	epoll_socket.h	/^    EpollSocket();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket	epoll_socket.h	/^    EpollSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocket	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket	epoll_socket.h	/^class EpollSocket$/;"	c
EpollSocket::EPOLL_SIZE	epoll_socket.h	/^    static const int EPOLL_SIZE = 6000;$/;"	m	class:EpollSocket	access:private
EpollSocket::EVENTS_SIZE	epoll_socket.h	/^    static const int EVENTS_SIZE = EPOLL_SIZE;$/;"	m	class:EpollSocket	access:private
EpollSocket::EpollSocket	epoll_socket.cpp	/^EpollSocket::EpollSocket()$/;"	f	class:EpollSocket	signature:()
EpollSocket::EpollSocket	epoll_socket.cpp	/^EpollSocket::EpollSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocket	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket::EpollSocket	epoll_socket.h	/^    EpollSocket();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::EpollSocket	epoll_socket.h	/^    EpollSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocket	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket::add	epoll_socket.cpp	/^bool EpollSocket::add(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int sock_type)$/;"	f	class:EpollSocket	signature:(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int sock_type)
EpollSocket::add	epoll_socket.h	/^    bool add(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int sock_type);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int sock_type)
EpollSocket::bindPort	epoll_socket.cpp	/^bool EpollSocket::bindPort()$/;"	f	class:EpollSocket	signature:()
EpollSocket::bindPort	epoll_socket.h	/^    bool bindPort();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::count	epoll_socket.cpp	/^bool EpollSocket::count()$/;"	f	class:EpollSocket	signature:()
EpollSocket::count	epoll_socket.h	/^    int count();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::getAddr	epoll_socket.cpp	/^int EpollSocket::getAddr(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::getAddr	epoll_socket.h	/^    int getAddr(int sock_fd);$/;"	p	class:EpollSocket	access:protected	signature:(int sock_fd)
EpollSocket::getPort	epoll_socket.cpp	/^int EpollSocket::getPort(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::getPort	epoll_socket.h	/^    int getPort(int sock_fd);$/;"	p	class:EpollSocket	access:protected	signature:(int sock_fd)
EpollSocket::getSocketCount	epoll_socket.cpp	/^int EpollSocket::getSocketCount()$/;"	f	class:EpollSocket	signature:()
EpollSocket::getSocketCount	epoll_socket.h	/^    int getSocketCount();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::getTime	epoll_socket.cpp	/^int EpollSocket::getTime(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::getTime	epoll_socket.h	/^    int getTime(int socket_fd);$/;"	p	class:EpollSocket	access:public	signature:(int socket_fd)
EpollSocket::init	epoll_socket.cpp	/^void EpollSocket::init(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocket	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket::init	epoll_socket.h	/^    void init(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocket	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocket::listenPort	epoll_socket.cpp	/^bool EpollSocket::listenPort()$/;"	f	class:EpollSocket	signature:()
EpollSocket::listenPort	epoll_socket.h	/^    bool listenPort();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::m_available_socket_num	epoll_socket.h	/^    int m_available_socket_num;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_epoll_fd	epoll_socket.h	/^    int m_epoll_fd;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_events	epoll_socket.h	/^    struct epoll_event m_events[EVENTS_SIZE];$/;"	m	class:EpollSocket	typeref:struct:EpollSocket::epoll_event	access:private
EpollSocket::m_listen_num	epoll_socket.h	/^    int m_listen_num;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_mutex	epoll_socket.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_net_addr	epoll_socket.h	/^    netaddres_info_t *m_net_addr;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_socket	epoll_socket.h	/^    int *m_socket;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_socket_info	epoll_socket.h	/^    sock_info_t m_socket_info[EPOLL_SIZE];$/;"	m	class:EpollSocket	access:private
EpollSocket::m_socket_num	epoll_socket.h	/^    int m_socket_num;$/;"	m	class:EpollSocket	access:private
EpollSocket::m_wait_time_ms	epoll_socket.h	/^    int m_wait_time_ms;$/;"	m	class:EpollSocket	access:private
EpollSocket::removeSocket	epoll_socket.cpp	/^bool EpollSocket::removeSocket(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::removeSocket	epoll_socket.h	/^    bool removeSocket(int sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd)
EpollSocket::setNonblock	epoll_socket.cpp	/^bool EpollSocket::setNonblock(int& sock_fd)$/;"	f	class:EpollSocket	signature:(int& sock_fd)
EpollSocket::setNonblock	epoll_socket.h	/^    bool setNonblock(int& sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int& sock_fd)
EpollSocket::socketAvaiBegin	epoll_socket.cpp	/^SocketAvaiManager EpollSocket::socketAvaiBegin()$/;"	f	class:EpollSocket	signature:()
EpollSocket::socketAvaiBegin	epoll_socket.h	/^    SocketAvaiManager socketAvaiBegin();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::socketAvaiEnd	epoll_socket.cpp	/^SocketAvaiManager EpollSocket::socketAvaiEnd()$/;"	f	class:EpollSocket	signature:()
EpollSocket::socketAvaiEnd	epoll_socket.h	/^    SocketAvaiManager socketAvaiEnd();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::socketInfo	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfo(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
EpollSocket::socketInfo	epoll_socket.h	/^    SocketInfoManager socketInfo(int sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd)
EpollSocket::socketInfoBegin	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfoBegin()$/;"	f	class:EpollSocket	signature:()
EpollSocket::socketInfoBegin	epoll_socket.h	/^    SocketInfoManager socketInfoBegin();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::socketInfoEnd	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfoEnd()$/;"	f	class:EpollSocket	signature:()
EpollSocket::socketInfoEnd	epoll_socket.h	/^    SocketInfoManager socketInfoEnd();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::waitAvailableSocket	epoll_socket.cpp	/^int EpollSocket::waitAvailableSocket()$/;"	f	class:EpollSocket	signature:()
EpollSocket::waitAvailableSocket	epoll_socket.h	/^    int waitAvailableSocket();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocket::~EpollSocket	epoll_socket.cpp	/^EpollSocket::~EpollSocket()$/;"	f	class:EpollSocket	signature:()
EpollSocket::~EpollSocket	epoll_socket.h	/^    ~EpollSocket();$/;"	p	class:EpollSocket	access:public	signature:()
EpollSocketManager	epoll_socket_manager.cpp	/^SocketInfoManager::EpollSocketManager()$/;"	f	class:SocketInfoManager	signature:()
EpollSocketManager	epoll_socket_manager.h	/^    EpollSocketManager();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager	epoll_socket_manager.h	/^class EpollSocketManager$/;"	c
EpollSocketManager::EpollSocketManager	epoll_socket_manager.h	/^    EpollSocketManager();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::closeSocket	epoll_socket_manager.cpp	/^bool EpollSocketManager::closeSocket(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
EpollSocketManager::closeSocket	epoll_socket_manager.h	/^    void closeSocket(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
EpollSocketManager::count	epoll_socket_manager.cpp	/^int EpollSocketManager::count()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::count	epoll_socket_manager.h	/^    int count();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::getInstance	epoll_socket_manager.h	/^    static EpollSocketManager* getInstance();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::getSocketInfo	epoll_socket_manager.cpp	/^SocketInfoManager EpollSocketManager::getSocketInfo(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
EpollSocketManager::getSocketInfo	epoll_socket_manager.h	/^    SocketInfoManager getSocketInfo(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
EpollSocketManager::get_conn_socket_count	epoll_socket_manager.cpp	/^int EpollSocketManager::get_conn_socket_count()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::get_conn_socket_count	epoll_socket_manager.h	/^    int get_conn_socket_count();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::initSocket	epoll_socket_manager.cpp	/^bool EpollSocketManager::initSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocketManager	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocketManager::initSocket	epoll_socket_manager.h	/^    bool initSocket(netaddres_into_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocketManager	access:public	signature:(netaddres_into_t *netaddr, const int& addr_num, const int& wait_time_ms)
EpollSocketManager::m_epoll_socket	epoll_socket_manager.h	/^    EpollSocket m_epoll_socket;$/;"	m	class:EpollSocketManager	access:private
EpollSocketManager::m_epoll_socket_manager_instance	epoll_socket_manager.h	/^    static EpollSocketManager* m_epoll_socket_manager_instance;$/;"	m	class:EpollSocketManager	access:private
EpollSocketManager::putIntoEpoll	epoll_socket_manager.cpp	/^bool EpollSocketManager::putIntoEpoll(int fd, int cur_time,  int listen_port, int client_port, int ip_addr, int sock_type)$/;"	f	class:EpollSocketManager	signature:(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int sock_type)
EpollSocketManager::putIntoEpoll	epoll_socket_manager.h	/^    bool putIntoEpoll(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int sock_type);$/;"	p	class:EpollSocketManager	access:public	signature:(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int sock_type)
EpollSocketManager::remove	epoll_socket_manager.cpp	/^bool EpollSocketManager::remove(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
EpollSocketManager::remove	epoll_socket_manager.h	/^    bool remove(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
EpollSocketManager::socketAvaiBegin	epoll_socket_manager.cpp	/^SocketAvaiManager EpollSocketManager::socketAvaiBegin()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::socketAvaiEnd	epoll_socket_manager.cpp	/^SocketAvaiManager EpollSocketManager::socketAvaiEnd()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::socketAvailBegin	epoll_socket_manager.h	/^    SocketAvaiManager socketAvailBegin();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::socketAvailEnd	epoll_socket_manager.h	/^    SocketAvaiManager socketAvailEnd();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::socketInfoBegin	epoll_socket_manager.cpp	/^socketInfoManager EpollSocketManager::socketInfoBegin()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::socketInfoBegin	epoll_socket_manager.h	/^    SocketInfoManager socketInfoBegin();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::socketInfoEnd	epoll_socket_manager.cpp	/^socketInfoManager EpollSocketManager::socketInfoEnd()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::socketInfoEnd	epoll_socket_manager.h	/^    SocketInfoManager socketInfoEnd();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::waitAvailableSocket	epoll_socket_manager.cpp	/^int EpollSocketManager::waitAvailableSocket()$/;"	f	class:EpollSocketManager	signature:()
EpollSocketManager::waitAvailableSocket	epoll_socket_manager.h	/^    int waitAvailableSocket();$/;"	p	class:EpollSocketManager	access:public	signature:()
EpollSocketManager::~EpollSocketManager	epoll_socket_manager.h	/^    ~EpollSocketManager();$/;"	p	class:EpollSocketManager	access:public	signature:()
F	Session.vim	/^setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e$/;"	v
F	Session.vim	/^setlocal indentkeys=0{,0},:,0#,!^F,o,O,e$/;"	v
F7F7	test	/^ELF/;"	v
O	Session.vim	/^setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e$/;"	v
O	Session.vim	/^setlocal indentkeys=0{,0},:,0#,!^F,o,O,e$/;"	v
SOCKET_TUPE_CLIENT	epoll_socket.h	/^    SOCKET_TUPE_CLIENT$/;"	e	enum:SocketType
SOCKET_TYPE_SERVER	epoll_socket.h	/^    SOCKET_TYPE_SERVER,$/;"	e	enum:SocketType
SOCKET_TYPE_UNKNOWN	epoll_socket.h	/^    SOCKET_TYPE_UNKNOWN = 0,$/;"	e	enum:SocketType
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
SocketAvaiManager	epoll_socket.h	/^    SocketAvaiManager(int index, EpollSocket* epoll_socket_ptr) : m_fd_index(index), m_epoll_socket_ptr(epoll_socket_ptr)$/;"	f	class:SocketAvaiManager	access:public	signature:(int index, EpollSocket* epoll_socket_ptr)
SocketAvaiManager	epoll_socket.h	/^class SocketAvaiManager$/;"	c
SocketAvaiManager::SocketAvaiManager	epoll_socket.h	/^    SocketAvaiManager(int index, EpollSocket* epoll_socket_ptr) : m_fd_index(index), m_epoll_socket_ptr(epoll_socket_ptr)$/;"	f	class:SocketAvaiManager	access:public	signature:(int index, EpollSocket* epoll_socket_ptr)
SocketAvaiManager::acceptSocket	epoll_socket.h	/^    int acceptSocket(struct sockaddr_in* client_addr)$/;"	f	class:SocketAvaiManager	access:public	signature:(struct sockaddr_in* client_addr)
SocketAvaiManager::available	epoll_socket.h	/^    bool available()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::close	epoll_socket.h	/^    void close()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getAddr	epoll_socket.h	/^    int getAddr()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getListenPort	epoll_socket.h	/^    int getListenPort()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getPort	epoll_socket.h	/^    int getPort()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::getSocketFd	epoll_socket.h	/^    int getSocketFd()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::inUsed	epoll_socket.h	/^    bool inUsed()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::isListener	epoll_socket.h	/^    bool isListener()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::isOk	epoll_socket.h	/^    bool isOk()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::isWritable	epoll_socket.h	/^    bool isWritable()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketAvaiManager::m_epoll_socket_ptr	epoll_socket.h	/^    EpollSocket* m_epoll_socket_ptr;$/;"	m	class:SocketAvaiManager	access:private
SocketAvaiManager::m_fd_index	epoll_socket.h	/^    int m_fd_index;$/;"	m	class:SocketAvaiManager	access:private
SocketAvaiManager::m_socket_fd	epoll_socket.h	/^    int m_socket_fd;$/;"	m	class:SocketAvaiManager	access:private
SocketAvaiManager::operator !=	epoll_socket.h	/^    bool operator != (SocketAvaiManager socket_avai_manager)$/;"	f	class:SocketAvaiManager	access:public	signature:(SocketAvaiManager socket_avai_manager)
SocketAvaiManager::operator ++	epoll_socket.h	/^    SocketAvaiManager& operator ++ ()$/;"	f	class:SocketAvaiManager	access:public	signature:()
SocketInfoManager	epoll_socket.h	/^    SocketInfoManager(int index, EpollSocket* epoll_socket_ptr) : m_fd_index(index), m_epoll_socket_ptr(epoll_socket_ptr)$/;"	f	class:SocketInfoManager	access:public	signature:(int index, EpollSocket* epoll_socket_ptr)
SocketInfoManager	epoll_socket.h	/^class SocketInfoManager$/;"	c
SocketInfoManager::EpollSocketManager	epoll_socket_manager.cpp	/^SocketInfoManager::EpollSocketManager()$/;"	f	class:SocketInfoManager	signature:()
SocketInfoManager::SocketInfoManager	epoll_socket.h	/^    SocketInfoManager(int index, EpollSocket* epoll_socket_ptr) : m_fd_index(index), m_epoll_socket_ptr(epoll_socket_ptr)$/;"	f	class:SocketInfoManager	access:public	signature:(int index, EpollSocket* epoll_socket_ptr)
SocketInfoManager::close	epoll_socket.h	/^    void close()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::dump	epoll_socket.h	/^    std::string dump()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::flushBuffer	epoll_socket.h	/^    void flushBuffer()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getAddr	epoll_socket.h	/^    int getAddr()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getBuffer	epoll_socket.h	/^    std::string& getBuffer()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getInstance	epoll_socket_manager.cpp	/^SocketInfoManager* SocketInfoManager::getInstance()$/;"	f	class:SocketInfoManager	signature:()
SocketInfoManager::getListenPort	epoll_socket.h	/^    int getListenPort()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getPort	epoll_socket.h	/^    int getPort()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::getSocketFd	epoll_socket.h	/^    int getSocketFd()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::inUsed	epoll_socket.h	/^    bool inUsed()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::isListener	epoll_socket.h	/^    bool isListener()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::isOk	epoll_socket.h	/^    bool isOk()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::m_epoll_socket_ptr	epoll_socket.h	/^    EpollSocket* m_epoll_socket_ptr;$/;"	m	class:SocketInfoManager	access:private
SocketInfoManager::m_fd_index	epoll_socket.h	/^    int m_fd_index;$/;"	m	class:SocketInfoManager	access:private
SocketInfoManager::needRecvBytes	epoll_socket.h	/^    int needRecvBytes()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::operator !=	epoll_socket.h	/^    bool operator != (SocketInfoManager socket_info_manager)$/;"	f	class:SocketInfoManager	access:public	signature:(SocketInfoManager socket_info_manager)
SocketInfoManager::operator ++	epoll_socket.h	/^    SocketInfoManager& operator ++ ()$/;"	f	class:SocketInfoManager	access:public	signature:()
SocketInfoManager::setNeedRecvBytes	epoll_socket.h	/^    void setNeedRecvBytes(int need_bytes)$/;"	f	class:SocketInfoManager	access:public	signature:(int need_bytes)
SocketInfoManager::~EpollSocketManager	epoll_socket_manager.cpp	/^SocketInfoManager::~EpollSocketManager()$/;"	f	class:SocketInfoManager	signature:()
SocketType	epoll_socket.h	/^enum SocketType$/;"	g
TAGS	Session.vim	/^set tags=.\/tags,.\/TAGS,tags,TAGS,\/usr\/include\/c++\/tags$/;"	v
_	Session.vim	/^setlocal iskeyword=@,48-57,_,192-255$/;"	v
_EPOLL_SOCKET_H_	epoll_socket.h	2;"	d
_EPOLL_SOCKET_MANAGER_H_	epoll_socket_manager.h	2;"	d
_netaddres_info_t	epoll_socket.h	/^typedef struct _netaddres_info_t$/;"	s
_netaddres_info_t::m_backlog	epoll_socket.h	/^    int m_backlog;$/;"	m	struct:_netaddres_info_t	access:public
_netaddres_info_t::m_ip_addr	epoll_socket.h	/^    std::string m_ip_addr;$/;"	m	struct:_netaddres_info_t	access:public
_netaddres_info_t::m_port	epoll_socket.h	/^    int m_port;$/;"	m	struct:_netaddres_info_t	access:public
_sock_info_t	epoll_socket.h	/^typedef struct _sock_info_t$/;"	s
_sock_info_t::m_addr	epoll_socket.h	/^    int m_addr;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_closed	epoll_socket.h	/^    bool m_closed;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_listen_port	epoll_socket.h	/^    int m_listen_port;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_need_recv_bytes	epoll_socket.h	/^    int m_need_recv_bytes;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_port	epoll_socket.h	/^    int m_port;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_recv_buf	epoll_socket.h	/^    std::string m_recv_buf;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_time_ms	epoll_socket.h	/^    int m_time_ms;$/;"	m	struct:_sock_info_t	access:public
_sock_info_t::m_type	epoll_socket.h	/^    int m_type;$/;"	m	struct:_sock_info_t	access:public
acceptSocket	epoll_socket.h	/^    int acceptSocket(struct sockaddr_in* client_addr)$/;"	f	class:SocketAvaiManager	access:public	signature:(struct sockaddr_in* client_addr)
add	epoll_socket.cpp	/^bool EpollSocket::add(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int sock_type)$/;"	f	class:EpollSocket	signature:(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int sock_type)
add	epoll_socket.h	/^    bool add(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int sock_type);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd, int cur_time, int listen_port, int port, int sock_addr, int sock_type)
addons	Session.vim	/^set runtimepath=~\/.vim,\/var\/lib\/vim\/addons,\/usr\/share\/vim\/vimfiles,\/usr\/share\/vim\/vim74,\/usr\/share\/vim\/vimfiles\/after,\/var\/lib\/vim\/addons\/after,~\/.vim\/after$/;"	v
after	Session.vim	/^set runtimepath=~\/.vim,\/var\/lib\/vim\/addons,\/usr\/share\/vim\/vimfiles,\/usr\/share\/vim\/vim74,\/usr\/share\/vim\/vimfiles\/after,\/var\/lib\/vim\/addons\/after,~\/.vim\/after$/;"	v
available	epoll_socket.h	/^    bool available()$/;"	f	class:SocketAvaiManager	access:public	signature:()
b	Session.vim	/^setlocal complete=.,w,b,u,t,i$/;"	v
bindPort	epoll_socket.cpp	/^bool EpollSocket::bindPort()$/;"	f	class:EpollSocket	signature:()
bindPort	epoll_socket.h	/^    bool bindPort();$/;"	p	class:EpollSocket	access:public	signature:()
cinoptions	Session.vim	/^setlocal cinoptions=$/;"	v
close	epoll_socket.h	/^    void close()$/;"	f	class:SocketAvaiManager	access:public	signature:()
close	epoll_socket.h	/^    void close()$/;"	f	class:SocketInfoManager	access:public	signature:()
closeSocket	epoll_socket_manager.cpp	/^bool EpollSocketManager::closeSocket(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
closeSocket	epoll_socket_manager.h	/^    void closeSocket(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
colorcolumn	Session.vim	/^setlocal colorcolumn=$/;"	v
commentstring	Session.vim	/^setlocal commentstring=\/*%s*\/$/;"	v
completeopt	Session.vim	/^set completeopt=menuone,menu,longest$/;"	v
concealcursor	Session.vim	/^setlocal concealcursor=$/;"	v
count	epoll_socket.cpp	/^bool EpollSocket::count()$/;"	f	class:EpollSocket	signature:()
count	epoll_socket.h	/^    int count();$/;"	p	class:EpollSocket	access:public	signature:()
count	epoll_socket_manager.cpp	/^int EpollSocketManager::count()$/;"	f	class:EpollSocketManager	signature:()
count	epoll_socket_manager.h	/^    int count();$/;"	p	class:EpollSocketManager	access:public	signature:()
cscopequickfix	Session.vim	/^set cscopequickfix=s-,c-,d-,i-,t-,e-$/;"	v
dump	epoll_socket.h	/^    std::string dump()$/;"	f	class:SocketInfoManager	access:public	signature:()
eol	Session.vim	/^set backspace=indent,eol,start$/;"	v
flushBuffer	epoll_socket.h	/^    void flushBuffer()$/;"	f	class:SocketInfoManager	access:public	signature:()
foldlevelstart	Session.vim	/^set foldlevelstart=99$/;"	v
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
getAddr	epoll_socket.cpp	/^int EpollSocket::getAddr(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
getAddr	epoll_socket.h	/^    int getAddr()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getAddr	epoll_socket.h	/^    int getAddr()$/;"	f	class:SocketInfoManager	access:public	signature:()
getAddr	epoll_socket.h	/^    int getAddr(int sock_fd);$/;"	p	class:EpollSocket	access:protected	signature:(int sock_fd)
getBuffer	epoll_socket.h	/^    std::string& getBuffer()$/;"	f	class:SocketInfoManager	access:public	signature:()
getInstance	epoll_socket_manager.cpp	/^SocketInfoManager* SocketInfoManager::getInstance()$/;"	f	class:SocketInfoManager	signature:()
getInstance	epoll_socket_manager.h	/^    static EpollSocketManager* getInstance();$/;"	p	class:EpollSocketManager	access:public	signature:()
getListenPort	epoll_socket.h	/^    int getListenPort()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getListenPort	epoll_socket.h	/^    int getListenPort()$/;"	f	class:SocketInfoManager	access:public	signature:()
getPort	epoll_socket.cpp	/^int EpollSocket::getPort(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
getPort	epoll_socket.h	/^    int getPort()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getPort	epoll_socket.h	/^    int getPort()$/;"	f	class:SocketInfoManager	access:public	signature:()
getPort	epoll_socket.h	/^    int getPort(int sock_fd);$/;"	p	class:EpollSocket	access:protected	signature:(int sock_fd)
getSocketCount	epoll_socket.cpp	/^int EpollSocket::getSocketCount()$/;"	f	class:EpollSocket	signature:()
getSocketCount	epoll_socket.h	/^    int getSocketCount();$/;"	p	class:EpollSocket	access:public	signature:()
getSocketFd	epoll_socket.h	/^    int getSocketFd()$/;"	f	class:SocketAvaiManager	access:public	signature:()
getSocketFd	epoll_socket.h	/^    int getSocketFd()$/;"	f	class:SocketInfoManager	access:public	signature:()
getSocketInfo	epoll_socket_manager.cpp	/^SocketInfoManager EpollSocketManager::getSocketInfo(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
getSocketInfo	epoll_socket_manager.h	/^    SocketInfoManager getSocketInfo(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
getTime	epoll_socket.cpp	/^int EpollSocket::getTime(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
getTime	epoll_socket.h	/^    int getTime(int socket_fd);$/;"	p	class:EpollSocket	access:public	signature:(int socket_fd)
get_conn_socket_count	epoll_socket_manager.cpp	/^int EpollSocketManager::get_conn_socket_count()$/;"	f	class:EpollSocketManager	signature:()
get_conn_socket_count	epoll_socket_manager.h	/^    int get_conn_socket_count();$/;"	p	class:EpollSocketManager	access:public	signature:()
hA	test	/^ELF/;"	v
i	test	/^ELF/;"	v
inUsed	epoll_socket.h	/^    bool inUsed()$/;"	f	class:SocketAvaiManager	access:public	signature:()
inUsed	epoll_socket.h	/^    bool inUsed()$/;"	f	class:SocketInfoManager	access:public	signature:()
init	epoll_socket.cpp	/^void EpollSocket::init(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocket	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
init	epoll_socket.h	/^    void init(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocket	access:public	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
initSocket	epoll_socket_manager.cpp	/^bool EpollSocketManager::initSocket(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)$/;"	f	class:EpollSocketManager	signature:(netaddres_info_t *netaddr, const int& addr_num, const int& wait_time_ms)
initSocket	epoll_socket_manager.h	/^    bool initSocket(netaddres_into_t *netaddr, const int& addr_num, const int& wait_time_ms);$/;"	p	class:EpollSocketManager	access:public	signature:(netaddres_into_t *netaddr, const int& addr_num, const int& wait_time_ms)
isListener	epoll_socket.h	/^    bool isListener()$/;"	f	class:SocketAvaiManager	access:public	signature:()
isListener	epoll_socket.h	/^    bool isListener()$/;"	f	class:SocketInfoManager	access:public	signature:()
isOk	epoll_socket.h	/^    bool isOk()$/;"	f	class:SocketAvaiManager	access:public	signature:()
isOk	epoll_socket.h	/^    bool isOk()$/;"	f	class:SocketInfoManager	access:public	signature:()
isWritable	epoll_socket.h	/^    bool isWritable()$/;"	f	class:SocketAvaiManager	access:public	signature:()
iskeyword	Session.vim	/^setlocal iskeyword=@,48-57,_,192-255$/;"	v
listenPort	epoll_socket.cpp	/^bool EpollSocket::listenPort()$/;"	f	class:EpollSocket	signature:()
listenPort	epoll_socket.h	/^    bool listenPort();$/;"	p	class:EpollSocket	access:public	signature:()
m_addr	epoll_socket.h	/^    int m_addr;$/;"	m	struct:_sock_info_t	access:public
m_available_socket_num	epoll_socket.h	/^    int m_available_socket_num;$/;"	m	class:EpollSocket	access:private
m_backlog	epoll_socket.h	/^    int m_backlog;$/;"	m	struct:_netaddres_info_t	access:public
m_closed	epoll_socket.h	/^    bool m_closed;$/;"	m	struct:_sock_info_t	access:public
m_epoll_fd	epoll_socket.h	/^    int m_epoll_fd;$/;"	m	class:EpollSocket	access:private
m_epoll_socket	epoll_socket_manager.h	/^    EpollSocket m_epoll_socket;$/;"	m	class:EpollSocketManager	access:private
m_epoll_socket_manager_instance	epoll_socket_manager.cpp	/^EpollSocketManager *m_epoll_socket_manager_instance = new EpollSocketManager();$/;"	v
m_epoll_socket_manager_instance	epoll_socket_manager.h	/^    static EpollSocketManager* m_epoll_socket_manager_instance;$/;"	m	class:EpollSocketManager	access:private
m_epoll_socket_ptr	epoll_socket.h	/^    EpollSocket* m_epoll_socket_ptr;$/;"	m	class:SocketAvaiManager	access:private
m_epoll_socket_ptr	epoll_socket.h	/^    EpollSocket* m_epoll_socket_ptr;$/;"	m	class:SocketInfoManager	access:private
m_events	epoll_socket.h	/^    struct epoll_event m_events[EVENTS_SIZE];$/;"	m	class:EpollSocket	typeref:struct:EpollSocket::epoll_event	access:private
m_fd_index	epoll_socket.h	/^    int m_fd_index;$/;"	m	class:SocketAvaiManager	access:private
m_fd_index	epoll_socket.h	/^    int m_fd_index;$/;"	m	class:SocketInfoManager	access:private
m_ip_addr	epoll_socket.h	/^    std::string m_ip_addr;$/;"	m	struct:_netaddres_info_t	access:public
m_listen_num	epoll_socket.h	/^    int m_listen_num;$/;"	m	class:EpollSocket	access:private
m_listen_port	epoll_socket.h	/^    int m_listen_port;$/;"	m	struct:_sock_info_t	access:public
m_mutex	epoll_socket.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:EpollSocket	access:private
m_need_recv_bytes	epoll_socket.h	/^    int m_need_recv_bytes;$/;"	m	struct:_sock_info_t	access:public
m_net_addr	epoll_socket.h	/^    netaddres_info_t *m_net_addr;$/;"	m	class:EpollSocket	access:private
m_port	epoll_socket.h	/^    int m_port;$/;"	m	struct:_netaddres_info_t	access:public
m_port	epoll_socket.h	/^    int m_port;$/;"	m	struct:_sock_info_t	access:public
m_recv_buf	epoll_socket.h	/^    std::string m_recv_buf;$/;"	m	struct:_sock_info_t	access:public
m_socket	epoll_socket.h	/^    int *m_socket;$/;"	m	class:EpollSocket	access:private
m_socket_fd	epoll_socket.h	/^    int m_socket_fd;$/;"	m	class:SocketAvaiManager	access:private
m_socket_info	epoll_socket.h	/^    sock_info_t m_socket_info[EPOLL_SIZE];$/;"	m	class:EpollSocket	access:private
m_socket_num	epoll_socket.h	/^    int m_socket_num;$/;"	m	class:EpollSocket	access:private
m_time_ms	epoll_socket.h	/^    int m_time_ms;$/;"	m	struct:_sock_info_t	access:public
m_type	epoll_socket.h	/^    int m_type;$/;"	m	struct:_sock_info_t	access:public
m_wait_time_ms	epoll_socket.h	/^    int m_wait_time_ms;$/;"	m	class:EpollSocket	access:private
main	test.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
menu	Session.vim	/^set completeopt=menuone,menu,longest$/;"	v
needRecvBytes	epoll_socket.h	/^    int needRecvBytes()$/;"	f	class:SocketInfoManager	access:public	signature:()
netaddres_info_t	epoll_socket.h	/^}netaddres_info_t;$/;"	t	typeref:struct:_netaddres_info_t
nrformats	Session.vim	/^setlocal nrformats=octal,hex$/;"	v
numberwidth	Session.vim	/^setlocal numberwidth=4$/;"	v
o	Session.vim	/^setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e$/;"	v
o	Session.vim	/^setlocal indentkeys=0{,0},:,0#,!^F,o,O,e$/;"	v
operator !=	epoll_socket.h	/^    bool operator != (SocketAvaiManager socket_avai_manager)$/;"	f	class:SocketAvaiManager	access:public	signature:(SocketAvaiManager socket_avai_manager)
operator !=	epoll_socket.h	/^    bool operator != (SocketInfoManager socket_info_manager)$/;"	f	class:SocketInfoManager	access:public	signature:(SocketInfoManager socket_info_manager)
operator ++	epoll_socket.h	/^    SocketAvaiManager& operator ++ ()$/;"	f	class:SocketAvaiManager	access:public	signature:()
operator ++	epoll_socket.h	/^    SocketInfoManager& operator ++ ()$/;"	f	class:SocketInfoManager	access:public	signature:()
putIntoEpoll	epoll_socket_manager.cpp	/^bool EpollSocketManager::putIntoEpoll(int fd, int cur_time,  int listen_port, int client_port, int ip_addr, int sock_type)$/;"	f	class:EpollSocketManager	signature:(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int sock_type)
putIntoEpoll	epoll_socket_manager.h	/^    bool putIntoEpoll(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int sock_type);$/;"	p	class:EpollSocketManager	access:public	signature:(int fd, int cur_time, int listen_port, int client_port, int ip_addr, int sock_type)
remove	epoll_socket_manager.cpp	/^bool EpollSocketManager::remove(int sock_fd)$/;"	f	class:EpollSocketManager	signature:(int sock_fd)
remove	epoll_socket_manager.h	/^    bool remove(int sock_fd);$/;"	p	class:EpollSocketManager	access:public	signature:(int sock_fd)
removeSocket	epoll_socket.cpp	/^bool EpollSocket::removeSocket(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
removeSocket	epoll_socket.h	/^    bool removeSocket(int sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd)
setNeedRecvBytes	epoll_socket.h	/^    void setNeedRecvBytes(int need_bytes)$/;"	f	class:SocketInfoManager	access:public	signature:(int need_bytes)
setNonblock	epoll_socket.cpp	/^bool EpollSocket::setNonblock(int& sock_fd)$/;"	f	class:EpollSocket	signature:(int& sock_fd)
setNonblock	epoll_socket.h	/^    bool setNonblock(int& sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int& sock_fd)
so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
sock_info_t	epoll_socket.h	/^}sock_info_t;$/;"	t	typeref:struct:_sock_info_t
socketAvaiBegin	epoll_socket.cpp	/^SocketAvaiManager EpollSocket::socketAvaiBegin()$/;"	f	class:EpollSocket	signature:()
socketAvaiBegin	epoll_socket.h	/^    SocketAvaiManager socketAvaiBegin();$/;"	p	class:EpollSocket	access:public	signature:()
socketAvaiBegin	epoll_socket_manager.cpp	/^SocketAvaiManager EpollSocketManager::socketAvaiBegin()$/;"	f	class:EpollSocketManager	signature:()
socketAvaiEnd	epoll_socket.cpp	/^SocketAvaiManager EpollSocket::socketAvaiEnd()$/;"	f	class:EpollSocket	signature:()
socketAvaiEnd	epoll_socket.h	/^    SocketAvaiManager socketAvaiEnd();$/;"	p	class:EpollSocket	access:public	signature:()
socketAvaiEnd	epoll_socket_manager.cpp	/^SocketAvaiManager EpollSocketManager::socketAvaiEnd()$/;"	f	class:EpollSocketManager	signature:()
socketAvailBegin	epoll_socket_manager.h	/^    SocketAvaiManager socketAvailBegin();$/;"	p	class:EpollSocketManager	access:public	signature:()
socketAvailEnd	epoll_socket_manager.h	/^    SocketAvaiManager socketAvailEnd();$/;"	p	class:EpollSocketManager	access:public	signature:()
socketInfo	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfo(int sock_fd)$/;"	f	class:EpollSocket	signature:(int sock_fd)
socketInfo	epoll_socket.h	/^    SocketInfoManager socketInfo(int sock_fd);$/;"	p	class:EpollSocket	access:public	signature:(int sock_fd)
socketInfoBegin	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfoBegin()$/;"	f	class:EpollSocket	signature:()
socketInfoBegin	epoll_socket.h	/^    SocketInfoManager socketInfoBegin();$/;"	p	class:EpollSocket	access:public	signature:()
socketInfoBegin	epoll_socket_manager.cpp	/^socketInfoManager EpollSocketManager::socketInfoBegin()$/;"	f	class:EpollSocketManager	signature:()
socketInfoBegin	epoll_socket_manager.h	/^    SocketInfoManager socketInfoBegin();$/;"	p	class:EpollSocketManager	access:public	signature:()
socketInfoEnd	epoll_socket.cpp	/^SocketInfoManager EpollSocket::socketInfoEnd()$/;"	f	class:EpollSocket	signature:()
socketInfoEnd	epoll_socket.h	/^    SocketInfoManager socketInfoEnd();$/;"	p	class:EpollSocket	access:public	signature:()
socketInfoEnd	epoll_socket_manager.cpp	/^socketInfoManager EpollSocketManager::socketInfoEnd()$/;"	f	class:EpollSocketManager	signature:()
socketInfoEnd	epoll_socket_manager.h	/^    SocketInfoManager socketInfoEnd();$/;"	p	class:EpollSocketManager	access:public	signature:()
t	Session.vim	/^setlocal complete=.,w,b,u,t,i$/;"	v
tags	Session.vim	/^set tags=.\/tags,.\/TAGS,tags,TAGS,\/usr\/include\/c++\/tags$/;"	v
u	Session.vim	/^setlocal complete=.,w,b,u,t,i$/;"	v
vim74	Session.vim	/^set runtimepath=~\/.vim,\/var\/lib\/vim\/addons,\/usr\/share\/vim\/vimfiles,\/usr\/share\/vim\/vim74,\/usr\/share\/vim\/vimfiles\/after,\/var\/lib\/vim\/addons\/after,~\/.vim\/after$/;"	v
vimfiles	Session.vim	/^set runtimepath=~\/.vim,\/var\/lib\/vim\/addons,\/usr\/share\/vim\/vimfiles,\/usr\/share\/vim\/vim74,\/usr\/share\/vim\/vimfiles\/after,\/var\/lib\/vim\/addons\/after,~\/.vim\/after$/;"	v
w	Session.vim	/^setlocal complete=.,w,b,u,t,i$/;"	v
waitAvailableSocket	epoll_socket.cpp	/^int EpollSocket::waitAvailableSocket()$/;"	f	class:EpollSocket	signature:()
waitAvailableSocket	epoll_socket.h	/^    int waitAvailableSocket();$/;"	p	class:EpollSocket	access:public	signature:()
waitAvailableSocket	epoll_socket_manager.cpp	/^int EpollSocketManager::waitAvailableSocket()$/;"	f	class:EpollSocketManager	signature:()
waitAvailableSocket	epoll_socket_manager.h	/^    int waitAvailableSocket();$/;"	p	class:EpollSocketManager	access:public	signature:()
~EpollSocket	epoll_socket.cpp	/^EpollSocket::~EpollSocket()$/;"	f	class:EpollSocket	signature:()
~EpollSocket	epoll_socket.h	/^    ~EpollSocket();$/;"	p	class:EpollSocket	access:public	signature:()
~EpollSocketManager	epoll_socket_manager.cpp	/^SocketInfoManager::~EpollSocketManager()$/;"	f	class:SocketInfoManager	signature:()
~EpollSocketManager	epoll_socket_manager.h	/^    ~EpollSocketManager();$/;"	p	class:EpollSocketManager	access:public	signature:()
